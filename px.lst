     1                                  ; multitasking and dynamic thread registration
     2                                  [org 0x0100]
     3 00000000 E93C65                  jmp start
     4                                  ; PCB layout:
     5                                  ; ax,bx,cx,dx,si,di,bp,sp,ip,cs,ds,ss,es,flags,next,dummy
     6                                  ; 0, 2, 4, 6, 8,10,12,14,16,18,20,22,24, 26 , 28 , 30
     7 00000003 0000<rep 200h>          pcb: times 32*16 dw 0 ; space for 32 PCBs
     8 00000403 0000<rep 2000h>         stack: times 32*256 dw 0 ; space for 32 512 byte stacks
     9 00004403 0100                    nextpcb: dw 1 ; index of next free pcb
    10 00004405 0000                    current: dw 0 ; index of current pcb
    11 00004407 0000                    lineno: dw 0 ; line number for next thread
    12                                  ;length: dw 5 ; length of the string
    13 00004409 2A2A2A2A2A21212121-     messagex: dw '*****!!!!!^^^^^+++++@@@@@'
    13 00004412 215E5E5E5E5E2B2B2B-
    13 0000441B 2B2B404040404000   
    14 00004423 0000<rep 32h>           buffer: times 50 dw 0
    15                                  ; hello world in assembly
    16                                  [org 0x0100]
    17 00004487 E9B520                  jmp start
    18 0000448A 7572206D61696E2069-     mess:db'ur main is fine$'
    18 00004493 732066696E6524     
    19 0000449A 0800                    length: dw 8 ; length of the string
    20 0000449C 0D00                    length1: dw 13 ; length of the string
    21 0000449E 5F5F5F5F5F5F5F5F5F-     v1: db '___________________________    '
    21 000044A7 5F5F5F5F5F5F5F5F5F-
    21 000044B0 5F5F5F5F5F5F5F5F5F-
    21 000044B9 20202020           
    22 000044BD 7C2020207C20202020-     v2: db '|   |     |     |    | |   \   '
    22 000044C6 207C20202020207C20-
    22 000044CF 2020207C207C202020-
    22 000044D8 5C202020           
    23 000044DC 7C2020207C20202020-     v3: db '|   |     |     |    | |    \  '
    23 000044E5 207C20202020207C20-
    23 000044EE 2020207C207C202020-
    23 000044F7 205C2020           
    24 000044FB 205F5F5F205F5F5F5F-     v4: db ' ___ _____ _____ ____ _ _____  '
    24 00004504 5F205F5F5F5F5F205F-
    24 0000450D 5F5F5F205F205F5F5F-
    24 00004516 5F5F2020           
    25 0000451A 7C2020202020202020-     v5: db '|                    | |      \'
    25 00004523 202020202020202020-
    25 0000452C 2020207C207C202020-
    25 00004535 2020205C           
    26 00004539 202D2D286F29286F29-     v6: db ' --(o)(o)--------------(o)-----'
    26 00004542 2D2D2D2D2D2D2D2D2D-
    26 0000454B 2D2D2D2D2D286F292D-
    26 00004554 2D2D2D2D           
    27 00004558 1F00                    vansize: dw 31
    28 0000455A 0F                      vanindex: db 15
    29 0000455B 07                      attribute: db 7
    30 0000455C 0E                      rabbit_attribtue:db 14
    31 0000455D 2A2A2A                  rabbit: db '***'
    32 00004560 26                      rabbitindex: db 38    ;40
    33 00004561 0000<rep 528h>          store_rabbit: times 1320 dw 0
    34 00004FB1 2300                    platform_iterator: dw 35 
    35 00004FB3 0A                      game_iterator: db 10
    36 00004FB4 00                      bool_check: db 0
    37 00004FB5 00                      bool_movement:db 0
    38 00004FB6 0000                    bool_platform_low:db 0,0
    39 00004FB8 0000                    bool_platform_high:db 0,0
    40 00004FBA 14                      bool_initial:db 20
    41 00004FBB 00                      bool_initial2:db 0
    42 00004FBC 28                      bool_right:db 40
    43 00004FBD 28                      bool_left:db 40
    44 00004FBE 00                      bool_right2:db 0
    45 00004FBF 00                      bool_left2:db 0
    46 00004FC0 00                      bool_jump_occured:db 0
    47 00004FC1 2F2920285C              rabbit_boy:db  '/) (\'
    48 00004FC6 5C7C207C2F              rabbit_boy2:db '\| |/'
    49 00004FCB 2028222920              rabbit_boy3:db ' (") '  
    50 00004FD0 20205E2020              rabbit_boy4:db '  ^  '
    51 00004FD5 00                      seed:db 0   
    52 00004FD6 00                      rand_carrot:db 0
    53 00004FD7 00                      rand_color:db 0   
    54 00004FD8 00                      score:db 0
    55 00004FD9 53636F72653A            score_message:db 'Score:'
    56 00004FDF 00000000                oldisr: dd 0 ; space for saving old isr
    57 00004FE3 0000                    carrot_location:dw 0
    58                                  ;here
    59 00004FE5 0000                    platform_location:dw 0
    60 00004FE7 00                      bool_greenmov:db 0
    61 00004FE8 0A0D5573657220656E-     message1: db 10, 13, 'User entered something... $'
    61 00004FF1 746572656420736F6D-
    61 00004FFA 657468696E672E2E2E-
    61 00005003 2024               
    62                                  ;oldisr: dd 0									; space for saving old isr 1st 2 bytes for Offset, next 2 for cs
    63 00005005 0000                    tickcount: dw 0
    64 00005007 0500                    counter:dw 5
    65 00005009 4E4943452054525920-     exit_message:db 'NICE TRY .'
    65 00005012 2E                 
    66 00005013 507265737320656E74-     exc_message:db 'Press enter to continue,Esc to leave.$'
    66 0000501C 657220746F20636F6E-
    66 00005025 74696E75652C457363-
    66 0000502E 20746F206C65617665-
    66 00005037 2E24               
    67                                  
    68 00005039 202072727272722020      ironman:db '  rrrrr  '
    69 00005042 207272727272727220      f2:db' rrrrrrr '
    70 0000504B 207279727272797220      f3:db' ryrrryr '
    71 00005054 207279777977797220      f4:db' rywywyr '
    72 0000505D 207279797979797220      f5:db' ryyyyyr '
    73 00005066 202072797979722020      f6:db'  ryyyr  '
    74 0000506F 727272727772727272      f7:db'rrrrwrrrr'
    75 00005078 727972797279727972      f8:db'ryryryryr'
    76 00005081 202072727272722020      f9:db'  rrrrr  '
    77 0000508A 202079797279792020      f10:db'  yyryy  '
    78 00005093 202072727972722020      f11:db'  rryrr  '
    79                                  
    80                                  
    81                                  ;naruto
    82 0000509C 202079207920792020      naruto:db '  y y y  '
    83 000050A5 207979797979797920      n2:db ' yyyyyyy '
    84 000050AE 207920797373207920      n3:db ' y yss y '
    85 000050B7 792020792020202079      n4:db 'y  y    y'
    86 000050C0 207977627762777920      n5:db ' ywbwbwy '
    87 000050C9 207777777777777720      n6:db ' wwwwwww '
    88 000050D2 202077777777772020      n7:db '  wwwww  '
    89 000050DB 772020202020202077      n8:db 'w       w'
    90 000050E4 77206F6F206F6F2077      n9:db 'w oo oo w'
    91 000050ED 202020202020202020      n10:db '         '
    92 000050F6 20206F6F6F6F6F2020      n11:db '  ooooo  '
    93 000050FF 202077202020772020      n12:db '  w   w  '
    94                                  
    95 00005108 10                      fig_iterator:db 16
    96 00005109 10                      fig_iterator2:db 16
    97 0000510A 0D                      fig_iteratorx:db 13
    98                                  
    99 0000510B 4C4F4144494E4724        message: dw 'LOADING$' ; string to be printed
   100                                  
   101 00005113 00                      it:db 0
   102 00005114 00                      it2:db 0
   103 00005115 00                      it3:db 0
   104 00005116 11                      cit:db 17             
   105 00005117 20202020202020205F-     console:db   '        _=====_                               _=====_      '       
   105 00005120 3D3D3D3D3D5F202020-
   105 00005129 202020202020202020-
   105 00005132 202020202020202020-
   105 0000513B 202020202020202020-
   105 00005144 205F3D3D3D3D3D5F20-
   105 0000514D 2020202020         
   106 00005152 202020202020202F20-     console1:db	 '       / _____ \                             / _____ \     '	      
   106 0000515B 5F5F5F5F5F205C2020-
   106 00005164 202020202020202020-
   106 0000516D 202020202020202020-
   106 00005176 202020202020202020-
   106 0000517F 2F205F5F5F5F5F205C-
   106 00005188 2020202020         
   107 0000518D 20202020202B2E2D22-     console2:db	 '     +.-"_____"-.---------------------------.-"_____"-.+   '   	       
   107 00005196 5F5F5F5F5F222D2E2D-
   107 0000519F 2D2D2D2D2D2D2D2D2D-
   107 000051A8 2D2D2D2D2D2D2D2D2D-
   107 000051B1 2D2D2D2D2D2D2D2D2E-
   107 000051BA 2D225F5F5F5F5F222D-
   107 000051C3 2E2B202020         
   108 000051C8 202020202F2020207C-     console3:db	 '    /   |     |  ".        S O N Y        ."  |  _  |   \  '        
   108 000051D1 20202020207C202022-
   108 000051DA 2E2020202020202020-
   108 000051E3 53204F204E20592020-
   108 000051EC 2020202020202E2220-
   108 000051F5 207C20205F20207C20-
   108 000051FE 20205C2020         
   109 00005203 2020202F205F5F5F7C-     console4:db	 '   / ___| /|\ |___ \                     / ___| /_\ |___ \ '       
   109 0000520C 202F7C5C207C5F5F5F-
   109 00005215 205C20202020202020-
   109 0000521E 202020202020202020-
   109 00005227 20202020202F205F5F-
   109 00005230 5F7C202F5F5C207C5F-
   109 00005239 5F5F205C20         
   110 0000523E 20202F207C20202020-     console5:db	 '  / |      |      | ;  __           _   ; | _         _ | ;'	        
   110 00005247 20207C202020202020-
   110 00005250 7C203B20205F5F2020-
   110 00005259 202020202020202020-
   110 00005262 5F2020203B207C205F-
   110 0000526B 202020202020202020-
   110 00005274 5F207C203B         
   111 00005279 20207C207C203C2D2D-     console6:db	 '  | | <---   ---> | | |__|         |_:> | ||_|       (_)| |'	       
   111 00005282 2D2020202D2D2D3E20-
   111 0000528B 7C207C207C5F5F7C20-
   111 00005294 20202020202020207C-
   111 0000529D 5F3A3E207C207C7C5F-
   111 000052A6 7C2020202020202028-
   111 000052AF 5F297C207C         
   112 000052B4 20207C207C5F5F5F20-     console7:db  '  | |___   |   ___| ;SELECT       START ; |___       ___| ;'	       
   112 000052BD 20207C2020205F5F5F-
   112 000052C6 7C203B53454C454354-
   112 000052CF 202020202020205354-
   112 000052D8 415254203B207C5F5F-
   112 000052E1 5F202020202020205F-
   112 000052EA 5F5F7C203B         
   113 000052EF 20207C5C202020207C-     console8:db	 '  |\    | \|/ |    /  _     ___      _   \    | (X) |    /|'	       
   113 000052F8 205C7C2F207C202020-
   113 00005301 202F20205F20202020-
   113 0000530A 205F5F5F2020202020-
   113 00005313 205F2020205C202020-
   113 0000531C 207C20285829207C20-
   113 00005325 2020202F7C         
   114 0000532A 20207C205C2020207C-     console9:db	 '  | \   |_____|  .","" "", |___|  ,"" "", ".  |_____|  ." |'	      
   114 00005333 5F5F5F5F5F7C20202E-
   114 0000533C 222C22222022222C20-
   114 00005345 7C5F5F5F7C20202C22-
   114 0000534E 222022222C20222E20-
   114 00005357 207C5F5F5F5F5F7C20-
   114 00005360 202E22207C         
   115 00005365 20207C2020222D2E5F-     console10:db '  |  "-.______.-" /       \ANALOG/       \  "-._____.-"   |'		  
   115 0000536E 5F5F5F5F5F2E2D2220-
   115 00005377 2F202020202020205C-
   115 00005380 414E414C4F472F2020-
   115 00005389 20202020205C202022-
   115 00005392 2D2E5F5F5F5F5F2E2D-
   115 0000539B 222020207C         
   116 000053A0 20207C202020202020-     console11:db '  |               |       |------|       |                |'		  
   116 000053A9 202020202020202020-
   116 000053B2 7C202020202020207C-
   116 000053BB 2D2D2D2D2D2D7C2020-
   116 000053C4 20202020207C202020-
   116 000053CD 202020202020202020-
   116 000053D6 202020207C         
   117 000053DB 20207C202020202020-     console12:db '  |              /\       /      \       /\               |'		  
   117 000053E4 20202020202020202F-
   117 000053ED 5C202020202020202F-
   117 000053F6 2020202020205C2020-
   117 000053FF 20202020202F5C2020-
   117 00005408 202020202020202020-
   117 00005411 202020207C         
   118 00005416 20207C202020202020-     console13:db '  |             /  ".___."        ".___."  \              |'		  
   118 0000541F 202020202020202F20-
   118 00005428 20222E5F5F5F2E2220-
   118 00005431 20202020202020222E-
   118 0000543A 5F5F5F2E2220205C20-
   118 00005443 202020202020202020-
   118 0000544C 202020207C         
   119 00005451 20207C202020202020-     console14:db '  |            /                            \             |'		   
   119 0000545A 2020202020202F2020-
   119 00005463 202020202020202020-
   119 0000546C 202020202020202020-
   119 00005475 20202020202020205C-
   119 0000547E 202020202020202020-
   119 00005487 202020207C         
   120 0000548C 2020205C2020202020-     console15:db '   \          /                              \           / '		  
   120 00005495 20202020202F202020-
   120 0000549E 202020202020202020-
   120 000054A7 202020202020202020-
   120 000054B0 202020202020202020-
   120 000054B9 5C2020202020202020-
   120 000054C2 2020202F20         
   121 000054C7 202020205C5F5F5F5F-     console16:db '    \________/                                \_________/  '		   
   121 000054D0 5F5F5F5F2F20202020-
   121 000054D9 202020202020202020-
   121 000054E2 202020202020202020-
   121 000054EB 202020202020202020-
   121 000054F4 205C5F5F5F5F5F5F5F-
   121 000054FD 5F5F2F2020         
   122                                  
   123 00005502 41686D616420416264-     name1:db 'Ahmad Abdul Rehman'
   123 0000550B 756C205265686D616E 
   124 00005514 4768756C616D204168-     name2:db 'Ghulam Ahmad'
   124 0000551D 6D6164             
   125 00005520 32326C2D36383639        roll1:db '22l-6869'
   126 00005528 32326C2D36383932        roll2:db '22l-6892'
   127 00005530 50726F6A6563742062-     p:db 'Project by:'
   127 00005539 793A               
   128 0000553B 507265737320616E79-     start_message:db 'Press any key to start....'
   128 00005544 206B657920746F2073-
   128 0000554D 746172742E2E2E2E   
   129 00005555 4A554D50494E472052-     game_name:db 'JUMPING RABBIT'
   129 0000555E 4142424954         
   130 00005563 07                      font_att:db 7
   131                                  
   132                                  ;----------------------------------
   133                                  ; subroutine to clear the screen
   134                                  ;----------------------------------
   135 00005564 00                      check: db 0
   136 00005565 06                      clrscr:		push es
   137 00005566 50                      			push ax
   138 00005567 57                      			push di
   139                                  
   140 00005568 B800B8                  			mov ax, 0xb800
   141 0000556B 8EC0                    			mov es, ax					; point es to video base
   142 0000556D BF0000                  			mov di, 0					; point di to top left column
   143                                  
   144 00005570 26C7052007              nextloc:	mov word [es:di],0x0720	; clear next char on screen
   145 00005575 83C702                  			add di, 2					; move to next screen location
   146 00005578 81FF582C                			cmp di, 11352				; has the whole screen cleared
   147 0000557C 75F2                    			jne nextloc					; if no clear next position
   148                                  
   149 0000557E 5F                      			pop di
   150 0000557F 58                      			pop ax
   151 00005580 07                      			pop es
   152 00005581 C3                      			ret
   153                                  			
   154 00005582 51                      delayx:     push cx
   155 00005583 B9FFFF                  			mov cx, 0xFFFF
   156 00005586 E2FE                    loopee1:		loop loopee1
   157 00005588 B9FF0F                  			mov cx, 0xFff
   158 0000558B E2FE                    loopee2:		loop loopee2
   159 0000558D 59                      			pop cx
   160 0000558E C3                      			ret			
   161                                  			
   162                                  border:
   163                                  
   164 0000558F B8040C                  mov ax, 0x0C04       ;69 ; put pixel in white color
   165 00005592 31DB                    xor bx, bx ; page number 0
   166 00005594 B98002                  mov cx,640
   167 00005597 BA0000                  mov dx,0
   168                                  
   169 0000559A CD10                    b1:int 0x10
   170                                  ;call delay
   171 0000559C 42                      inc dx
   172 0000559D CD10                    int 0x10
   173 0000559F 42                      inc dx
   174 000055A0 CD10                    int 0x10
   175 000055A2 42                      inc dx
   176 000055A3 CD10                    int 0x10
   177 000055A5 42                      inc dx
   178 000055A6 CD10                    int 0x10
   179 000055A8 42                      inc dx
   180 000055A9 CD10                    int 0x10
   181 000055AB BA0000                  mov dx,0
   182 000055AE E2EA                    loop b1
   183                                  
   184 000055B0 B98002                  mov cx,640
   185 000055B3 BAE001                  mov dx,480
   186 000055B6 CD10                    b2:int 0x10
   187                                  ;call delay
   188 000055B8 4A                      dec dx
   189 000055B9 CD10                    int 0x10
   190 000055BB 4A                      dec dx
   191 000055BC CD10                    int 0x10
   192 000055BE 4A                      dec dx
   193 000055BF CD10                    int 0x10
   194 000055C1 4A                      dec dx
   195 000055C2 CD10                    int 0x10
   196 000055C4 4A                      dec dx
   197 000055C5 CD10                    int 0x10
   198 000055C7 BAE001                  mov dx,480
   199 000055CA E2EA                    loop b2
   200                                  
   201 000055CC CD10                    b3:int 0x10
   202                                  ;call delay
   203 000055CE 41                      inc cx
   204 000055CF CD10                    int 0x10
   205 000055D1 41                      inc cx
   206 000055D2 CD10                    int 0x10
   207 000055D4 41                      inc cx
   208 000055D5 CD10                    int 0x10
   209 000055D7 41                      inc cx
   210 000055D8 CD10                    int 0x10
   211 000055DA 41                      inc cx
   212 000055DB CD10                    int 0x10
   213 000055DD B90000                  mov cx,0
   214 000055E0 83EA01                  sub dx,1
   215 000055E3 75E7                    jnz b3
   216                                  
   217 000055E5 B98002                  mov cx,640
   218 000055E8 BAE001                  mov dx,480
   219 000055EB CD10                    b4:int 0x10
   220                                  ;call delay
   221 000055ED 49                      dec cx
   222 000055EE CD10                    int 0x10
   223 000055F0 49                      dec cx
   224 000055F1 CD10                    int 0x10
   225 000055F3 49                      dec cx
   226 000055F4 CD10                    int 0x10
   227 000055F6 49                      dec cx
   228 000055F7 CD10                    int 0x10
   229 000055F9 49                      dec cx
   230 000055FA CD10                    int 0x10
   231 000055FC B98002                  mov cx,640
   232 000055FF 83EA01                  sub dx,1
   233 00005602 75E7                    jnz b4
   234                                  
   235                                  
   236                                  
   237 00005604 C3                      ret
   238                                  
   239                                  segmentclear:
   240 00005605 55                                  push bp
   241 00005606 89E5                    			mov bp,sp
   242 00005608 06                      			push es
   243 00005609 50                      			push ax
   244 0000560A 57                      			push di
   245 0000560B 53                                  push bx
   246                                  			
   247 0000560C B800B8                  			mov ax, 0xb800
   248 0000560F 8EC0                    			mov es, ax					; point es to video base
   249                                  			
   250 00005611 B084                    			mov al, 132				; load al with columns per row
   251 00005613 F66606                  			mul byte [bp+6]		; 132 x r
   252 00005616 034604                  			add ax, [bp+4]			; word number (132xr) + c
   253 00005619 D1E0                    			shl ax, 1				; byte no (((132xr) + c)x2)
   254 0000561B 89C7                    			mov di,ax
   255 0000561D 89C3                    			mov bx,ax
   256 0000561F 81C32805                			add bx,1320               ; 792
   257                                  			
   258 00005623 26C7052007              nextloc2:	mov word [es:di], 0x0720	; clear next char on screen
   259 00005628 83C702                  			add di, 2					; move to next screen location
   260 0000562B 39DF                    			cmp di, bx				; has the whole screen cleared
   261 0000562D 75F4                    			jne nextloc2					; if no clear next position
   262                                              
   263 0000562F 5B                      			pop bx
   264 00005630 5F                      			pop di
   265 00005631 58                      			pop ax
   266 00005632 07                      			pop es
   267 00005633 5D                      			pop bp
   268 00005634 C20400                  			ret 4
   269                                  
   270                                  delay:     
   271 00005637 31C9                    xor cx,cx
   272 00005639 31D2                    xor dx,dx
   273 0000563B B9E803                  mov cx,1000
   274                                  next:
   275 0000563E BA5000                  mov dx,80
   276                                  next2:
   277 00005641 4A                      dec dx
   278 00005642 75FD                    jnz next2
   279 00005644 E2F8                    loop next
   280 00005646 C3                      ret
   281                                  
   282                                  
   283                                  ;prints building
   284                                  set_building:
   285 00005647 55                                  push bp
   286 00005648 89E5                    			mov bp, sp
   287 0000564A 06                      			push es
   288 0000564B 50                      			push ax
   289 0000564C 51                      			push cx
   290 0000564D 56                      			push si
   291 0000564E 57                      			push di
   292                                  
   293 0000564F B800B8                  			mov ax, 0xb800
   294 00005652 8EC0                    			mov es, ax				; point es to video base
   295                                  
   296 00005654 B084                    			mov al, 132				; load al with columns per row
   297 00005656 F66608                  			mul byte [bp+8]		; 132 x r
   298 00005659 034606                  			add ax, [bp+6]			; word number (132xr) + c
   299 0000565C D1E0                    			shl ax, 1				; byte no (((132xr) + c)x2)
   300                                  
   301 0000565E 89C7                    			mov di, ax				; point di to required location
   302 00005660 8A6604                  			mov ah, [bp+4]			; load attribute in ah
   303                                  print_building:
   304 00005663 89FB                            mov bx,di 
   305 00005665 B65A                    		mov dh,90      ;byte[length]
   306                                  		
   307                                  forwardloop:                           ;uses nested loops to print a building
   308 00005667 B90A00                  		mov cx,10
   309                                  		uploop:
   310 0000566A B021                    		       mov al,33
   311 0000566C 268905                  			   mov [es:di],ax
   312 0000566F 81EF0801                			   sub di,264
   313                                  			   
   314 00005673 E2F5                    			   loop uploop
   315 00005675 83C302                  			   add bx,2
   316 00005678 89DF                    			   mov di,bx			   
   317 0000567A 80EE01                  			   sub dh,1
   318 0000567D 75E8                    			   jnz forwardloop
   319                                  			   
   320                                  			   
   321 0000567F 5F                      			pop di
   322 00005680 5E                      			pop si
   323 00005681 59                      			pop cx
   324 00005682 58                      			pop ax
   325 00005683 07                      			pop es
   326 00005684 5D                      			pop bp
   327 00005685 C20600                  			ret 6
   328                                  set_window: 
   329 00005688 55                      push bp
   330 00005689 89E5                    			mov bp, sp
   331 0000568B 06                      			push es
   332 0000568C 50                      			push ax
   333 0000568D 51                      			push cx
   334 0000568E 56                      			push si
   335 0000568F 57                      			push di
   336                                  
   337 00005690 B800B8                  			mov ax, 0xb800
   338 00005693 8EC0                    			mov es, ax				; point es to video base
   339                                  
   340 00005695 B084                    			mov al, 132				; load al with columns per row
   341 00005697 F6660A                  			mul byte [bp+10]		    ; 132 x r
   342 0000569A 034608                  			add ax, [bp+8]			; word number (132xr) + c
   343 0000569D D1E0                    			shl ax, 1				; byte no (((132xr) + c)x2)
   344                                  
   345 0000569F 89C7                    			mov di, ax				; point di to required location
   346 000056A1 8B4E04                  			mov cx, [bp+4]			; load length of string in cx
   347 000056A4 8A6606                  			mov ah, [bp+6]			; load attribute in ah
   348                                  
   349                                  print_window:
   350                                               
   351 000056A7 B000                                mov al,0
   352 000056A9 268905                              mov [es:di],ax
   353 000056AC 83C714                              add di,20
   354 000056AF E2F6                                loop print_window			
   355                                  			
   356                                  			 
   357 000056B1 5F                      			pop di
   358 000056B2 5E                      			pop si
   359 000056B3 59                      			pop cx
   360 000056B4 58                      			pop ax
   361 000056B5 07                      			pop es
   362 000056B6 5D                      			pop bp
   363 000056B7 C20800                  			ret 8
   364                                                 			   
   365                                  
   366                                  set_door:
   367 000056BA 55                                  push bp
   368 000056BB 89E5                    			mov bp, sp
   369 000056BD 06                      			push es
   370 000056BE 50                      			push ax
   371 000056BF 51                      			push cx
   372 000056C0 56                      			push si
   373 000056C1 57                      			push di
   374                                  
   375 000056C2 B800B8                  			mov ax, 0xb800
   376 000056C5 8EC0                    			mov es, ax				; point es to video base
   377                                  
   378 000056C7 B084                    			mov al, 132				; load al with columns per row
   379 000056C9 F66608                  			mul byte [bp+8]		; 80 x r
   380 000056CC 034606                  			add ax, [bp+6]			; word number (132xr) + c
   381 000056CF D1E0                    			shl ax, 1				; byte no (((132xr) + c)x2)
   382                                  
   383 000056D1 89C7                    			mov di, ax				; point di to required location
   384 000056D3 8A6604                  			mov ah, [bp+4]			; load attribute in ah
   385                                  print_door:
   386 000056D6 89FB                    	    mov bx,di 
   387 000056D8 B60B                    		mov dh,11      ;byte[length]
   388                                  		
   389                                  forward2loop:
   390 000056DA B90300                  		mov cx,3
   391                                  		up2loop:
   392 000056DD B000                    		       mov al,0
   393 000056DF 268905                  			   mov [es:di],ax
   394 000056E2 81EF0801                			   sub di,264
   395                                  			   
   396 000056E6 E2F5                    			   loop up2loop
   397 000056E8 83C302                  			   add bx,2
   398 000056EB 89DF                    			   mov di,bx			   
   399 000056ED 80EE01                  			   sub dh,1
   400 000056F0 75E8                    			   jnz forward2loop
   401                                  			   
   402 000056F2 5F                      			pop di
   403 000056F3 5E                      			pop si
   404 000056F4 59                      			pop cx
   405 000056F5 58                      			pop ax
   406 000056F6 07                      			pop es
   407 000056F7 5D                      			pop bp
   408 000056F8 C20600                  			ret 6
   409                                  set_moon:
   410 000056FB 55                                  push bp
   411 000056FC 89E5                    			mov bp, sp
   412 000056FE 06                      			push es
   413 000056FF 50                      			push ax
   414 00005700 51                      			push cx
   415 00005701 56                      			push si
   416 00005702 57                      			push di
   417                                  
   418 00005703 B800B8                  			mov ax, 0xb800
   419 00005706 8EC0                    			mov es, ax				; point es to video base
   420                                  
   421 00005708 B084                    			mov al, 132				; load al with columns per row
   422 0000570A F66608                  			mul byte [bp+8]		    ; 132 x r
   423 0000570D 034606                  			add ax, [bp+6]			; word number (132xr) + c
   424 00005710 D1E0                    			shl ax, 1				; byte no (((132xr) + c)x2)
   425                                  
   426 00005712 89C7                    			mov di, ax				; point di to required location
   427 00005714 B460                    			mov ah, 0x60			; load attribute in ah
   428                                  print_moon:
   429 00005716 B000                    		   mov al,0
   430 00005718 268905                  		   mov [es:di],ax
   431 0000571B 81EF0801                		   sub di,264
   432 0000571F 268905                  		   mov [es:di],ax
   433 00005722 8A6604                  		   mov ah, [bp+4]
   434 00005725 81EF0C01                		   sub di,268
   435 00005729 268905                  		   mov [es:di],ax
   436 0000572C 83C702                  		   add di,2
   437 0000572F 268905                  		   mov [es:di],ax
   438 00005732 83C702                  		   add di,2
   439 00005735 268905                  		   mov [es:di],ax
   440 00005738 83C702                  		   add di,2
   441 0000573B 268905                  		   mov [es:di],ax
   442 0000573E 83C702                  		   add di,2
   443 00005741 268905                  		   mov [es:di],ax
   444 00005744 81EF0E01                		   sub di,270
   445 00005748 268905                  		   mov [es:di],ax
   446 0000574B 83C702                  		   add di,2
   447 0000574E 268905                  		   mov [es:di],ax
   448 00005751 83C702                  		   add di,2
   449 00005754 268905                  		   mov [es:di],ax
   450 00005757 81EF0A01                		   sub di,266
   451                                  		   
   452 0000575B 268905                  		   mov [es:di],ax
   453 0000575E 5F                      		    pop di
   454 0000575F 5E                      			pop si
   455 00005760 59                      			pop cx
   456 00005761 58                      			pop ax
   457 00005762 07                      			pop es
   458 00005763 5D                      			pop bp
   459 00005764 C20600                  			ret 6
   460                                  
   461                                  
   462 00005767 55                      print_figure:push bp
   463 00005768 89E5                    mov bp,sp
   464 0000576A 50                      push ax
   465 0000576B 06                      push es
   466 0000576C 56                      push si
   467 0000576D 57                      push di
   468 0000576E 51                      push cx
   469                                  
   470 0000576F B800B8                  mov ax, 0xb800
   471 00005772 8EC0                    mov es, ax					; point es to video base
   472                                  
   473 00005774 B084                    mov al, 132				; load al with columns per row
   474 00005776 F66608                  mul byte [bp+8]		; 132 x r
   475 00005779 034606                  add ax, [bp+6]			; word number (132xr) + c
   476 0000577C D1E0                    shl ax, 1				; byte no (((132xr) + c)x2)
   477                                  
   478                                  
   479 0000577E 89C7                    mov di,ax
   480 00005780 8B7604                  mov si,[bp+4]
   481                                  
   482 00005783 B90900                  mov cx,9
   483 00005786 B020                    mov al,' '
   484                                  fig_loop:
   485 00005788 803C77                  cmp byte[si],'w'
   486 0000578B 7434                    jz white_block
   487 0000578D 803C6F                  cmp byte[si],'o'
   488 00005790 7436                    jz orange_block
   489 00005792 803C79                  cmp byte[si],'y'
   490 00005795 7438                    jz yellow_block
   491 00005797 803C73                  cmp byte[si],'s'
   492 0000579A 743A                    jz grey_block
   493 0000579C 803C72                  cmp byte[si],'r'
   494 0000579F 8A1C                    mov bl,[si]
   495 000057A1 80FB72                  cmp bl,'r'
   496 000057A4 7437                    jz red_block
   497 000057A6 803C62                  cmp byte[si],'b'
   498 000057A9 7439                    jz blue_block
   499 000057AB B407                    mov ah,0x07
   500 000057AD 268905                  mov [es:di],ax
   501                                  fpoint:
   502 000057B0 83C702                  add di,2
   503 000057B3 83C601                  add si,1
   504 000057B6 E2D0                    loop fig_loop
   505                                  
   506                                  
   507 000057B8 59                      pop cx
   508 000057B9 5F                      pop di
   509 000057BA 5E                      pop si
   510 000057BB 07                      pop es
   511 000057BC 58                      pop ax
   512 000057BD 5D                      pop bp
   513                                  
   514 000057BE C20600                  ret 6
   515                                  
   516                                  white_block:
   517 000057C1 B4F8                    mov ah,0xf8
   518 000057C3 268905                  mov [es:di],ax
   519 000057C6 EBE8                    jmp fpoint
   520                                  orange_block:
   521 000057C8 B466                    mov ah,0x66
   522 000057CA 268905                  mov [es:di],ax
   523 000057CD EBE1                    jmp fpoint
   524                                  yellow_block:
   525 000057CF B4EE                    mov ah,0xee
   526 000057D1 268905                  mov [es:di],ax
   527 000057D4 EBDA                    jmp fpoint
   528                                  grey_block:
   529 000057D6 B477                    mov ah,0x77
   530 000057D8 268905                  mov [es:di],ax
   531 000057DB EBD3                    jmp fpoint
   532                                  red_block:
   533 000057DD B444                    mov ah,0x44
   534 000057DF 268905                  mov [es:di],ax
   535 000057E2 EBCC                    jmp fpoint
   536                                  blue_block:
   537 000057E4 B411                    mov ah,0x11
   538 000057E6 268905                  mov [es:di],ax
   539 000057E9 EBC5                    jmp fpoint
   540                                  
   541 000057EB 55                      set_road:   push bp
   542 000057EC 89E5                    			mov bp, sp
   543 000057EE 06                      			push es
   544 000057EF 50                      			push ax
   545 000057F0 51                      			push cx
   546 000057F1 56                      			push si
   547 000057F2 57                      			push di
   548                                  
   549 000057F3 B800B8                  			mov ax, 0xb800
   550 000057F6 8EC0                    			mov es, ax				; point es to video base
   551                                  
   552 000057F8 B084                    			mov al, 132				; load al with columns per row
   553 000057FA F66608                  			mul byte [bp+8]		    ; 132 x r
   554 000057FD 034606                  			add ax, [bp+6]			; word number (132xr) + c
   555 00005800 D1E0                    			shl ax, 1				; byte no (((132xr) + c)x2)
   556                                  
   557 00005802 89C7                    			mov di, ax				; point di to required location
   558                                  			
   559 00005804 8A6604                  			mov ah, [bp+4]			; load attribute in ah
   560 00005807 B98400                  			mov cx,132			
   561                                  print_road:
   562 0000580A B020                                mov al,' '
   563 0000580C 268905                              mov [es:di],ax
   564 0000580F 83C702                              add di,2
   565 00005812 83E901                              sub cx,1
   566 00005815 75F3                    			jnz print_road
   567 00005817 5F                      			 pop di
   568 00005818 5E                      			pop si
   569 00005819 59                      			pop cx
   570 0000581A 58                      			pop ax
   571 0000581B 07                      			pop es
   572 0000581C 5D                      			pop bp
   573 0000581D C20600                  			ret 6
   574                                  			
   575                                  			
   576 00005820 55                      set_van:    push bp
   577 00005821 89E5                    			mov bp, sp
   578 00005823 06                      			push es
   579 00005824 50                      			push ax
   580 00005825 51                      			push cx
   581 00005826 56                      			push si
   582 00005827 57                      			push di
   583                                  
   584 00005828 B800B8                  			mov ax, 0xb800
   585 0000582B 8EC0                    			mov es, ax				; point es to video base
   586                                  
   587 0000582D B084                    			mov al, 132				; load al with columns per row
   588 0000582F F6660C                  			mul byte [bp+12]		; 132 x r
   589 00005832 03460A                  			add ax, [bp+10]			; word number (132xr) + c
   590 00005835 D1E0                    			shl ax, 1				; byte no (((132xr) + c)x2)
   591                                  
   592 00005837 89C7                    			mov di, ax				; point di to required location
   593 00005839 8B7606                  			mov si, [bp+6]			; point si to string
   594 0000583C 8B4E04                  			mov cx, [bp+4]			; load length of string in cx
   595 0000583F 8A6608                  			mov ah, [bp+8]			; load attribute in ah
   596                                  			
   597                                  			print_van:
   598 00005842 8A04                    			mov al,[si]
   599 00005844 268905                  			mov [es:di],ax
   600 00005847 83C702                  			add di,2
   601 0000584A 83C601                  			add si,1
   602 0000584D E2F3                    			loop print_van
   603 0000584F 5F                      			pop di
   604 00005850 5E                      			pop si
   605 00005851 59                      			pop cx
   606 00005852 58                      			pop ax
   607 00005853 07                      			pop es
   608 00005854 5D                      			pop bp
   609 00005855 C20A00                  			ret 10
   610                                  			
   611 00005858 55                      print_stars:push bp
   612 00005859 89E5                    			mov bp, sp
   613 0000585B 06                      			push es
   614 0000585C 50                      			push ax
   615 0000585D 51                      			push cx
   616 0000585E 56                      			push si
   617 0000585F 57                      			push di
   618                                  
   619 00005860 B800B8                  			mov ax, 0xb800
   620 00005863 8EC0                    			mov es, ax				; point es to video base
   621                                  
   622 00005865 B084                    			mov al, 132				; load al with columns per row
   623 00005867 F66608                  			mul byte [bp+8]		    ; 132 x r
   624 0000586A 034606                  			add ax, [bp+6]			; word number (132xr) + c
   625 0000586D D1E0                    			shl ax, 1				; byte no (((132xr) + c)x2)
   626                                  
   627 0000586F 89C7                    			mov di, ax				; point di to required location
   628                                  			
   629 00005871 8A6604                  			mov ah, [bp+4]			; load attribute in ah
   630 00005874 B90300                  			mov cx,3
   631 00005877 B02A                    			mov al,42
   632                                  			star:
   633 00005879 81EFFE01                			sub di,510
   634 0000587D 268905                  			mov [es:di],ax
   635 00005880 81C78002                			add di,640
   636 00005884 268905                  			mov [es:di],ax
   637 00005887 E2F0                    			loop star
   638 00005889 5F                      			pop di
   639 0000588A 5E                      			pop si
   640 0000588B 59                      			pop cx
   641 0000588C 58                      			pop ax
   642 0000588D 07                      			pop es
   643 0000588E 5D                      			pop bp
   644 0000588F C20600                  			ret 6
   645                                  shiftleft:
   646 00005892 55                      push bp
   647 00005893 89E5                    			mov bp,sp
   648 00005895 06                      			push es
   649 00005896 50                      			push ax
   650 00005897 51                      			push cx
   651 00005898 56                      			push si
   652 00005899 57                      			push di
   653 0000589A 1E                      			push ds
   654 0000589B 53                      			push bx
   655 0000589C 52                      			push dx
   656 0000589D B800B8                  			mov ax, 0xb800
   657 000058A0 8EC0                    			mov es, ax				; point es to video base
   658 000058A2 8ED8                                mov ds,ax
   659                                  			
   660 000058A4 B084                    			mov al, 132				; load al with columns per row
   661 000058A6 F66606                  			mul byte [bp+6]		    ; 132 x r
   662 000058A9 034604                  			add ax, [bp+4]			; word number (132xr) + c
   663 000058AC D1E0                    			shl ax, 1				; byte no (((132xr) + c)x2)
   664                                  
   665 000058AE 89C7                    			mov di, ax				; point di to required location
   666 000058B0 89C6                    			mov si,ax
   667 000058B2 89FA                    			mov dx,di			
   668 000058B4 268B1D                  			mov bx,[es:di]
   669                                  
   670 000058B7 83C602                  			add si,2
   671                                  			
   672 000058BA B98400                  			mov cx,132
   673                                  			
   674 000058BD FC                      			cld
   675 000058BE F3A5                    			rep movsw
   676 000058C0 89D7                                mov di,dx
   677 000058C2 81C70601                			add di,262
   678 000058C6 26891D                  			mov [es:di],bx			
   679                                  			
   680                                  			
   681 000058C9 5A                      			pop dx
   682 000058CA 5B                      			pop bx
   683 000058CB 1F                      			pop ds
   684 000058CC 5F                      			pop di
   685 000058CD 5E                      			pop si
   686 000058CE 59                      			pop cx
   687 000058CF 58                      			pop ax
   688 000058D0 07                      			pop es
   689 000058D1 5D                      			pop bp
   690 000058D2 C20400                  			ret 4			
   691                                  animate_left:
   692 000058D5 BA0000                  mov dx,0
   693 000058D8 B90F00                  mov cx,15
   694                                  loop_shiftleft:
   695 000058DB 89D0                    mov ax,dx
   696 000058DD 50                      push ax	
   697 000058DE 31C0                    xor ax,ax
   698 000058E0 50                      push ax
   699 000058E1 E8AEFF                  call shiftleft	
   700 000058E4 42                      inc dx
   701 000058E5 E2F4                    loop loop_shiftleft
   702 000058E7 C3                      ret
   703                                  shiftright:
   704 000058E8 55                      			push bp
   705 000058E9 89E5                    			mov bp,sp
   706 000058EB 06                      			push es
   707 000058EC 50                      			push ax
   708 000058ED 51                      			push cx
   709 000058EE 56                      			push si
   710 000058EF 57                      			push di
   711 000058F0 1E                      			push ds
   712 000058F1 53                      			push bx
   713 000058F2 52                      			push dx
   714 000058F3 B800B8                  			mov ax, 0xb800
   715 000058F6 8EC0                    			mov es, ax				; point es to video base
   716 000058F8 8ED8                                mov ds,ax
   717                                  			
   718 000058FA B084                    			mov al, 132				; load al with columns per row
   719 000058FC F66606                  			mul byte [bp+6]		    ; 132 x r
   720 000058FF 034604                  			add ax, [bp+4]			; word number (132xr) + c
   721 00005902 D1E0                    			shl ax, 1				; byte no (((132xr) + c)x2)
   722                                  
   723 00005904 89C7                    			mov di, ax				; point di to required location
   724 00005906 89C6                    			mov si,ax
   725 00005908 89C2                    			mov dx,ax
   726 0000590A 81C60401                			add si,260
   727 0000590E 81C70601                			add di,262
   728 00005912 B98400                  			mov cx,132
   729 00005915 268B1D                  			mov bx,[es:di]           ;store last value in bx
   730 00005918 FD                      			std                      ;auto decrement mode
   731 00005919 F3A5                    			rep movsw                ;movs from [ds:si] to [es:di]
   732 0000591B 89D7                    			mov di,dx
   733 0000591D 26891D                  			mov [es:di],bx			 ;add last value to the start
   734                                  			
   735 00005920 5A                      			pop dx
   736 00005921 5B                      			pop bx
   737 00005922 1F                      			pop ds
   738 00005923 5F                      			pop di
   739 00005924 5E                      			pop si
   740 00005925 59                      			pop cx
   741 00005926 58                      			pop ax
   742 00005927 07                      			pop es
   743 00005928 5D                      			pop bp
   744 00005929 C20400                  			ret 4
   745                                  animate:
   746 0000592C BA0F00                  mov dx,15
   747 0000592F B90F00                  mov cx,15
   748                                  loop_shiftright:
   749 00005932 89D0                    mov ax,dx
   750 00005934 50                      push ax	
   751 00005935 31C0                    xor ax,ax
   752 00005937 50                      push ax
   753 00005938 E8ADFF                  call shiftright	
   754 0000593B 42                      inc dx
   755 0000593C E2F4                    loop loop_shiftright
   756 0000593E C3                      ret
   757 0000593F 55                      saveScreen2: push bp
   758 00005940 89E5                    			mov bp, sp
   759 00005942 06                      			push es
   760 00005943 50                      			push ax
   761 00005944 51                      			push cx
   762 00005945 56                      			push si
   763 00005946 57                      			push di
   764 00005947 1E                      			push ds
   765 00005948 B800B8                  mov ax,0xb800
   766 0000594B 8EC0                    mov es,ax
   767 0000594D B084                    			mov al, 132				; load al with columns per row
   768 0000594F F66606                  			mul byte [bp+6]		; 132 x r
   769 00005952 034604                  			add ax, [bp+4]			; word number (132xr) + c
   770 00005955 D1E0                    			shl ax, 1				; byte no (((132xr) + c)x2)
   771 00005957 89C7                    			mov di, ax				; point di to required location
   772 00005959 B92805                  mov cx,1320
   773 0000595C BE[6145]                mov si,store_rabbit
   774                                  saveloop2:
   775 0000595F 268B05                  mov ax, [es:di] ; no, save this character
   776 00005962 8904                    mov [si],ax
   777 00005964 46                      inc si
   778 00005965 47                      inc di
   779 00005966 E2F7                    loop saveloop2
   780 00005968 1F                                  pop ds
   781 00005969 5F                      			pop di
   782 0000596A 5E                      			pop si
   783 0000596B 59                      			pop cx
   784 0000596C 58                      			pop ax
   785 0000596D 07                      			pop es
   786 0000596E 5D                      			pop bp
   787 0000596F C20400                  			ret 4
   788                                  
   789 00005972 55                      saveScreen: push bp
   790 00005973 89E5                    			mov bp, sp
   791 00005975 06                      			push es
   792 00005976 50                      			push ax
   793 00005977 51                      			push cx
   794 00005978 56                      			push si
   795 00005979 57                      			push di
   796 0000597A 1E                      			push ds
   797 0000597B B800B8                  mov ax,0xb800
   798 0000597E 8EC0                    mov es,ax
   799 00005980 B084                    			mov al, 132				; load al with columns per row
   800 00005982 F66606                  			mul byte [bp+6]		; 132 x r
   801 00005985 034604                  			add ax, [bp+4]			; word number (132xr) + c
   802 00005988 D1E0                    			shl ax, 1				; byte no (((132xr) + c)x2)
   803 0000598A 89C7                    			mov di, ax				; point di to required location
   804 0000598C B92004                  mov cx,1056
   805 0000598F BE[6145]                mov si,store_rabbit
   806                                  saveloop:
   807 00005992 268B05                  mov ax, [es:di] ; no, save this character
   808 00005995 8904                    mov [si],ax
   809 00005997 46                      inc si
   810 00005998 47                      inc di
   811 00005999 E2F7                    loop saveloop
   812 0000599B 1F                                  pop ds
   813 0000599C 5F                      			pop di
   814 0000599D 5E                      			pop si
   815 0000599E 59                      			pop cx
   816 0000599F 58                      			pop ax
   817 000059A0 07                      			pop es
   818 000059A1 5D                      			pop bp
   819 000059A2 C20400                  			ret 4
   820                                  
   821 000059A5 55                      restoreScreen:push bp
   822 000059A6 89E5                                  mov bp,sp
   823 000059A8 50                      			  push ax
   824 000059A9 06                      			  push es
   825 000059AA 57                      			  push di
   826 000059AB 56                      			  push si
   827                                  
   828 000059AC BE[6145]                mov si,store_rabbit
   829 000059AF B800B8                  mov ax,0xb800
   830 000059B2 8EC0                    mov es,ax
   831 000059B4 B084                    			mov al, 132				; load al with columns per row
   832 000059B6 F66606                  			mul byte [bp+6]		; 132 x r
   833 000059B9 034604                  			add ax, [bp+4]			; word number (132xr) + c
   834 000059BC D1E0                    			shl ax, 1				; byte no (((132xr) + c)x2)
   835 000059BE 89C7                    			mov di, ax				; point di to required location
   836                                  
   837 000059C0 B92004                  mov cx,1056                             ;528
   838                                  restoreloop:
   839 000059C3 8B04                    mov ax,[si]
   840 000059C5 268905                  mov [es:di],ax
   841 000059C8 46                      inc si
   842 000059C9 47                      inc di
   843 000059CA E2F7                    loop restoreloop
   844                                                
   845 000059CC 5E                      			  pop si
   846 000059CD 5F                      			  pop di
   847 000059CE 07                      			  pop es
   848 000059CF 58                      			  pop ax
   849 000059D0 5D                      			  pop bp
   850 000059D1 C20400                  ret 4
   851 000059D4 55                      restoreScreen2:push bp
   852 000059D5 89E5                                  mov bp,sp
   853 000059D7 50                      			  push ax
   854 000059D8 06                      			  push es
   855 000059D9 57                      			  push di
   856 000059DA 56                      			  push si
   857                                  
   858 000059DB BE[6145]                mov si,store_rabbit
   859 000059DE B800B8                  mov ax,0xb800
   860 000059E1 8EC0                    mov es,ax
   861 000059E3 B084                    			mov al, 132				; load al with columns per row
   862 000059E5 F66606                  			mul byte [bp+6]		; 132 x r
   863 000059E8 034604                  			add ax, [bp+4]			; word number (132xr) + c
   864 000059EB D1E0                    			shl ax, 1				; byte no (((132xr) + c)x2)
   865 000059ED 89C7                    			mov di, ax				; point di to required location
   866                                  
   867 000059EF B92805                  mov cx,1320
   868                                  restoreloop2:
   869 000059F2 8B04                    mov ax,[si]
   870 000059F4 268905                  mov [es:di],ax
   871 000059F7 46                      inc si
   872 000059F8 47                      inc di
   873 000059F9 E2F7                    loop restoreloop2
   874                                                
   875 000059FB 5E                      			  pop si
   876 000059FC 5F                      			  pop di
   877 000059FD 07                      			  pop es
   878 000059FE 58                      			  pop ax
   879 000059FF 5D                      			  pop bp
   880 00005A00 C20400                  ret 4
   881                                  
   882 00005A03 55                      print_platform:push bp
   883 00005A04 89E5                                  mov bp,sp
   884 00005A06 50                      			  push ax
   885 00005A07 06                      			  push es
   886 00005A08 57                      			  push di
   887 00005A09 56                      			  push si
   888                                  
   889                                  
   890 00005A0A B800B8                  mov ax,0xb800
   891 00005A0D 8EC0                    mov es,ax
   892 00005A0F B084                    			mov al, 132				; load al with columns per row
   893 00005A11 F66606                  			mul byte [bp+6]		    ; 132 x r
   894 00005A14 034604                  			add ax, [bp+4]			; word number (132xr) + c
   895 00005A17 D1E0                    			shl ax, 1				; byte no (((132xr) + c)x2)
   896 00005A19 89C7                    			mov di, ax				; point di to required location
   897                                  
   898 00005A1B 83C768                              add di,104
   899 00005A1E B91400                  			mov cx,20
   900 00005A21 B03D                    			mov al,'='
   901 00005A23 B444                    			mov ah,0x44                              ;[attribute]
   902 00005A25 FC                      			cld
   903 00005A26 F3AB                    			rep stosw
   904 00005A28 5E                      			  pop si
   905 00005A29 5F                      			  pop di
   906 00005A2A 07                      			  pop es
   907 00005A2B 58                      			  pop ax
   908 00005A2C 5D                      			  pop bp
   909 00005A2D C20400                  ret 4
   910                                  
   911 00005A30 55                      print_platform2:push bp
   912 00005A31 89E5                                  mov bp,sp
   913 00005A33 50                      			  push ax
   914 00005A34 06                      			  push es
   915 00005A35 57                      			  push di
   916 00005A36 56                      			  push si
   917 00005A37 53                                    push bx
   918 00005A38 B42C                    mov ah, 2Ch    ; AH = Function to get system time
   919 00005A3A CD21                        int 21h        ; Call DOS to get time
   920 00005A3C 8816[D54F]                  mov byte [seed], dl   ; Store seconds as the seedd
   921                                  ; Generate a random number
   922 00005A40 8A16[0550]              mov dl,byte[tickcount]
   923 00005A44 A0[0550]                mov al,byte[tickcount] ;[seed]  ; Load the current seed
   924 00005A47 30E0                        xor al, ah      ; XOR with high byte of time for more randomness
   925 00005A49 30D0                        xor al, dl      ; XOR with seconds
   926 00005A4B D0C8                        ror al, 1       ; Rotate right for randomness
   927 00005A4D 30D0                        xor al, dl      ; XOR again for more randomness
   928 00005A4F 2403                        and al, 0x03    ; Ensure it's a 2-bit value (values 0 to 3)
   929 00005A51 88E7                    mov bh,ah
   930 00005A53 8A1E[D54F]              mov bl, [seed]  ; Load the current seed
   931 00005A57 30E3                        xor bl, ah      ; XOR with high byte of time for more randomness
   932 00005A59 30D3                        xor bl, dl      ; XOR with seconds
   933 00005A5B D0CB                        ror bl, 1       ; Rotate right for randomness
   934 00005A5D 30D3                        xor bl, dl      ; XOR again for more randomness
   935 00005A5F 80E30F                      and bl, 0x0f    ; Ensure it's a 2-bit value (values 0 to 3)
   936                                      ; Add 1 to the random number to get a value between 1 and 4
   937 00005A62 FEC0                        inc al
   938 00005A64 A2[D74F]                mov [rand_color],al
   939 00005A67 B700                    mov bh,0
   940 00005A69 FEC3                    inc bl
   941 00005A6B C0E302                  shl bl,2
   942 00005A6E B800B8                  mov ax,0xb800
   943 00005A71 8EC0                    mov es,ax
   944 00005A73 B084                    			mov al, 132				; load al with columns per row
   945 00005A75 F66606                  			mul byte [bp+6]		    ; 132 x r
   946 00005A78 034604                  			add ax, [bp+4]			; word number (132xr) + c
   947 00005A7B D1E0                    			shl ax, 1				; byte no (((132xr) + c)x2)
   948 00005A7D 89C7                    			mov di, ax				; point di to required location
   949                                  
   950 00005A7F C606[E74F]00                        mov byte[bool_greenmov],0
   951 00005A84 83C768                              add di,104
   952 00005A87 803E[D84F]02            			cmp byte[score],2
   953 00005A8C 7509                    			jnz pp1
   954 00005A8E 83EF18                  			sub di,24
   955 00005A91 01DF                    			add di,bx
   956 00005A93 893E[E54F]              			mov word[platform_location],di
   957                                  			pp1:
   958 00005A97 B91400                  			mov cx,20
   959 00005A9A B03D                    			mov al,'='
   960 00005A9C 803E[D74F]01            			cmp byte[rand_color],1
   961 00005AA1 741C                    			jz  green_color
   962 00005AA3 803E[D74F]02            			cmp byte[rand_color],2
   963 00005AA8 7421                    			jz  yellow_color
   964 00005AAA 803E[D74F]03            			cmp byte[rand_color],3
   965 00005AAF 7421                    			jz blue_color
   966 00005AB1 B444                    			mov ah,0x44                              ;[attribute]
   967 00005AB3 FC                      			cld
   968 00005AB4 F3AB                    			rep stosw
   969                                  			rpoint:
   970                                  			  
   971 00005AB6 5B                      			  pop bx
   972 00005AB7 5E                      			  pop si
   973 00005AB8 5F                      			  pop di
   974 00005AB9 07                      			  pop es
   975 00005ABA 58                      			  pop ax
   976 00005ABB 5D                      			  pop bp
   977 00005ABC C20400                  ret 4
   978                                  green_color:
   979 00005ABF B422                    			mov ah,0x22                              ;[attribute]
   980 00005AC1 FC                      			cld
   981 00005AC2 F3AB                    			rep stosw
   982 00005AC4 C606[E74F]01            			mov byte[bool_greenmov],1
   983 00005AC9 EBEB                                jmp rpoint
   984                                  yellow_color:
   985 00005ACB B4EE                    			mov ah,0xee                             ;[attribute]
   986 00005ACD FC                      			cld
   987 00005ACE F3AB                    			rep stosw
   988 00005AD0 EBE4                                jmp rpoint
   989                                  blue_color:
   990 00005AD2 B433                    			mov ah,0x33                             ;[attribute]
   991 00005AD4 FC                      			cld
   992 00005AD5 F3AB                    			rep stosw
   993 00005AD7 EBDD                                jmp rpoint
   994                                  
   995                                  platform_down:
   996                                  			
   997 00005AD9 A1[B14F]                			mov ax,[platform_iterator]
   998 00005ADC 50                      			push ax
   999 00005ADD B80000                  			mov ax,0
  1000 00005AE0 50                      			push ax
  1001 00005AE1 E85BFE                  			call saveScreen2
  1002 00005AE4 A1[B14F]                			 mov ax,[platform_iterator]
  1003 00005AE7 50                      			 push ax
  1004 00005AE8 B80000                  			 mov ax,0
  1005 00005AEB 50                      			 push ax
  1006 00005AEC E816FB                  			 call segmentclear
  1007                                  			 ;inc byte[platform_iterator]
  1008 00005AEF B82600                  			 mov ax,38                                     ;[platform_iterator]
  1009 00005AF2 50                      			 push ax
  1010 00005AF3 B80000                  			 mov ax,0
  1011 00005AF6 50                      			 push ax
  1012 00005AF7 E8DAFE                  			 call restoreScreen2
  1013                                  			 ;call delay
  1014                                  			 ;call delay
  1015                                  			 ;mov ax,[platform_iterator]
  1016                                  			 ;cmp ax,38
  1017                                               ;jnz platform_down
  1018 00005AFA C3                      			 ret
  1019                                  check_below:
  1020 00005AFB 60                      pusha
  1021                                  
  1022 00005AFC B800B8                  mov ax,0xb800
  1023 00005AFF 8EC0                    mov es,ax
  1024 00005B01 B82025                  mov ax,9504
  1025 00005B04 89C7                    mov di,ax	
  1026 00005B06 89C6                    mov si,ax
  1027 00005B08 B05E                    mov al,'^'
  1028                                  
  1029                                  checkloop:
  1030 00005B0A 268A1D                  mov bl,[es:di]
  1031 00005B0D 83C702                  add di,2
  1032 00005B10 38C3                    cmp bl,al
  1033 00005B12 75F6                    jnz checkloop
  1034 00005B14 B85007                  mov ax,0x0750
  1035 00005B17 83EF02                  sub di,2
  1036                                                                    ;we have the value where rabbit's leg is starting from.
  1037 00005B1A BB0A00                  mov bx,10
  1038 00005B1D 81C70401                add di,260                        ;1 row down,2 column left
  1039 00005B21 B03D                    mov al,'='
  1040 00005B23 268A15                  mov dl,[es:di]
  1041 00005B26 38D0                    cmp al,dl
  1042 00005B28 740B                    jz update_bool
  1043 00005B2A 01DF                    add di,bx
  1044 00005B2C 268A15                  mov dl,[es:di]
  1045 00005B2F 38D0                    cmp al,dl
  1046 00005B31 7402                    jz update_bool
  1047                                  
  1048 00005B33 61                      popa
  1049 00005B34 C3                      ret
  1050                                  
  1051                                  update_bool:
  1052 00005B35 C606[B44F]01            mov byte[bool_check],1
  1053 00005B3A 61                      popa
  1054 00005B3B C3                      ret
  1055                                  
  1056                                  
  1057                                  check_for_carrot:
  1058 00005B3C 60                      pusha
  1059 00005B3D B800B8                  mov ax,0xb800
  1060 00005B40 8EC0                    mov es,ax
  1061 00005B42 B89823                  mov ax,9112      ; 9504                  ;9240
  1062 00005B45 89C7                    mov di,ax	
  1063 00005B47 89C6                    mov si,ax
  1064 00005B49 B05E                    mov al,'^'
  1065                                  
  1066                                  checkloop2:
  1067 00005B4B 268A1D                  mov bl,[es:di]
  1068 00005B4E 83C702                  add di,2
  1069 00005B51 38C3                    cmp bl,al
  1070 00005B53 75F6                    jnz checkloop2
  1071 00005B55 83EF02                  sub di,2
  1072                                  
  1073 00005B58 803E[D64F]01            cmp byte[rand_carrot],1
  1074 00005B5D 7410                    jz  check_c1
  1075 00005B5F 803E[D64F]02            cmp byte[rand_carrot],2
  1076 00005B64 741F                    jz  check_c2
  1077 00005B66 803E[D64F]03            cmp byte[rand_carrot],3
  1078 00005B6B 742E                    jz  check_c3
  1079                                  
  1080                                  comeback_point:
  1081                                  
  1082 00005B6D 61                      popa
  1083 00005B6E C3                      ret
  1084                                  
  1085                                  check_c1:
  1086 00005B6F 83C706                  add di,6  ;4
  1087 00005B72 81FF7A23                cmp di,9082        ;9610                     ;9346
  1088 00005B76 7302                    jae check2_c1
  1089 00005B78 EBF3                    jmp comeback_point
  1090                                  check2_c1:
  1091 00005B7A 83EF08                  sub di,8
  1092 00005B7D 81FF7E23                cmp di,9086   ;9614                      ;9350
  1093 00005B81 762E                    jbe update_score
  1094 00005B83 EBE8                    jmp comeback_point
  1095                                  
  1096                                  check_c2:
  1097 00005B85 83C706                  add di,6
  1098 00005B88 81FF8023                cmp di,9088   ;9616                        ;9352
  1099 00005B8C 7302                    jae check2_c2
  1100 00005B8E EBDD                    jmp comeback_point
  1101                                  check2_c2:
  1102 00005B90 83EF08                  sub di,8
  1103 00005B93 81FF8423                cmp di,9092 ;9620                       ;9356
  1104 00005B97 7618                    jbe update_score
  1105 00005B99 EBD2                    jmp comeback_point
  1106                                  
  1107                                  
  1108                                  check_c3:
  1109 00005B9B 83C706                  add di,6
  1110 00005B9E 81FF9423                cmp di,9108  ;9636                       ;9372
  1111 00005BA2 7302                    jae check2_c3
  1112 00005BA4 EBC7                    jmp comeback_point
  1113                                  check2_c3:
  1114 00005BA6 83EF08                  sub di,8
  1115 00005BA9 81FF9823                cmp di,9112    ;9640                       ;9376
  1116 00005BAD 7602                    jbe update_score
  1117 00005BAF EBBC                    jmp comeback_point
  1118                                  
  1119                                  update_score:
  1120 00005BB1 FE06[D84F]              inc byte[score]
  1121 00005BB5 EBB6                    jmp comeback_point
  1122                                  
  1123                                  jump_rabbit: 
  1124                                  			
  1125 00005BB7 C706[B14F]1F00                      mov word[platform_iterator],31                               ;needed for platform down.
  1126 00005BBD C606[B54F]00            			mov byte[bool_movement],0			
  1127 00005BC2 B82600                              mov ax,38
  1128 00005BC5 50                      			push ax
  1129 00005BC6 B80000                  			mov ax,0
  1130 00005BC9 50                      			push ax
  1131 00005BCA E8A5FD                              call saveScreen
  1132                                  						
  1133 00005BCD B400                    			mov ah, 0		
  1134 00005BCF CD16                                int 0x16
  1135                                  			
  1136 00005BD1 B82600                  			mov ax,38
  1137 00005BD4 50                      			push ax
  1138 00005BD5 B80000                  			mov ax,0
  1139 00005BD8 50                      			push ax
  1140 00005BD9 E829FA                  			call segmentclear
  1141                                  			
  1142 00005BDC B81F00                  			mov ax,31
  1143 00005BDF 50                      			push ax
  1144 00005BE0 B80000                  			mov ax,0
  1145 00005BE3 50                      			push ax
  1146 00005BE4 E8BEFD                              call restoreScreen
  1147                                  			
  1148 00005BE7 E811FF                  			call check_below                                        ;not working properly!
  1149 00005BEA A0[B44F]                			mov al,[bool_check]
  1150 00005BED 3C00                    			cmp al,0
  1151 00005BEF 0F8472F9                			jz clrscr
  1152                                  						
  1153 00005BF3 E8E3FE                              call platform_down	
  1154                                              
  1155 00005BF6 B82300                              mov ax,35
  1156 00005BF9 50                      		    push ax
  1157 00005BFA B80000                  		    mov ax,0
  1158 00005BFD 50                      		    push ax
  1159 00005BFE E82FFE                  		    call print_platform2			
  1160 00005C01 C3                      			ret
  1161                                  			
  1162                                  
  1163                                  
  1164                                  
  1165                                  			rabbit_platform_shift_left:
  1166 00005C02 60                      			pusha
  1167 00005C03 BA0500                  			mov dx,5
  1168 00005C06 BB1F00                  			mov bx,31
  1169                                  			rpsl:
  1170 00005C09 89D8                    			mov ax,bx
  1171 00005C0B 50                      			push ax
  1172 00005C0C B80000                  			mov ax,0
  1173 00005C0F 50                      			push ax
  1174 00005C10 E87FFC                  			call shiftleft
  1175 00005C13 83C301                  			add bx,1
  1176 00005C16 83EA01                  			sub dx,1			
  1177 00005C19 75EE                    			jnz rpsl			
  1178 00005C1B 61                      			popa
  1179 00005C1C C3                      			ret
  1180                                  			
  1181                                  			rabbit_platform_shift_left2:
  1182 00005C1D 60                      			pusha
  1183 00005C1E BA0500                  			mov dx,5
  1184 00005C21 BB2600                  			mov bx,38
  1185                                  			rpsl2:
  1186 00005C24 89D8                    			mov ax,bx
  1187 00005C26 50                      			push ax
  1188 00005C27 B80000                  			mov ax,0
  1189 00005C2A 50                      			push ax
  1190 00005C2B E864FC                  			call shiftleft
  1191 00005C2E 83C301                  			add bx,1
  1192 00005C31 83EA01                  			sub dx,1			
  1193 00005C34 75EE                    			jnz rpsl2			
  1194 00005C36 61                      			popa
  1195 00005C37 C3                      			ret
  1196                                  			rabbit_platform_shift_right:
  1197 00005C38 60                      			pusha
  1198 00005C39 BA0500                  			mov dx,5
  1199 00005C3C BB1F00                  			mov bx,31
  1200                                  			rpsr:
  1201 00005C3F 89D8                    			mov ax,bx
  1202 00005C41 50                      			push ax
  1203 00005C42 B80000                  			mov ax,0
  1204 00005C45 50                      			push ax
  1205 00005C46 E89FFC                  			call shiftright
  1206 00005C49 83C301                  			add bx,1
  1207 00005C4C 83EA01                  			sub dx,1			
  1208 00005C4F 75EE                    			jnz rpsr			
  1209 00005C51 61                      			popa
  1210 00005C52 C3                      			ret
  1211                                  			rabbit_platform_shift_right2:
  1212 00005C53 60                      			pusha
  1213 00005C54 BA0500                  			mov dx,5
  1214 00005C57 BB2600                  			mov bx,38
  1215                                  			rpsr2:
  1216 00005C5A 89D8                    			mov ax,bx
  1217 00005C5C 50                      			push ax
  1218 00005C5D B80000                  			mov ax,0
  1219 00005C60 50                      			push ax
  1220 00005C61 E884FC                  			call shiftright
  1221 00005C64 83C301                  			add bx,1
  1222 00005C67 83EA01                  			sub dx,1			
  1223 00005C6A 75EE                    			jnz rpsr2			
  1224 00005C6C 61                      			popa
  1225 00005C6D C3                      			ret
  1226                                  
  1227                                  ;-------------------------------------------------------------------
  1228                                  ; keyboard interrupt service routine
  1229                                  ;-------------------------------------------------------------------
  1230 00005C6E 50                      kbisr:		push ax
  1231 00005C6F 06                      			push es
  1232                                  
  1233 00005C70 B800B8                  			mov ax, 0xb800
  1234 00005C73 8EC0                    			mov es, ax ; point es to video memory
  1235                                  
  1236 00005C75 E460                    			in al, 0x60 ; read a char from keyboard port
  1237 00005C77 3C48                    			cmp al, 0x48     ; 2a ; has the up arrow pressed.........
  1238 00005C79 0F859800                			jne  nextcmp           ;nomatch ; no, try next comparison
  1239 00005C7D 2EC706[0750]0500        			mov word[cs:counter],5			
  1240 00005C84 C706[B14F]1F00          			mov word[platform_iterator],31                               ;needed for platform down.
  1241 00005C8A C606[B44F]00            			mov byte[bool_check],0
  1242 00005C8F C606[C04F]01            			mov byte[bool_jump_occured],1
  1243 00005C94 B82600                              mov ax,38
  1244 00005C97 50                      			push ax
  1245 00005C98 B80000                  			mov ax,0
  1246 00005C9B 50                      			push ax
  1247 00005C9C E8D3FC                              call saveScreen
  1248                                  			
  1249 00005C9F 50                      			push ax                                              ;this code carry forwards the movement of old platform.
  1250 00005CA0 A0[BA4F]                			mov al,byte[bool_initial]
  1251 00005CA3 A2[BB4F]                			mov byte[bool_initial2],al	
  1252 00005CA6 A0[BC4F]                			mov al,byte[bool_right]
  1253 00005CA9 A2[BE4F]                			mov byte[bool_right2],al
  1254 00005CAC A0[BD4F]                			mov al,byte[bool_left]
  1255 00005CAF A2[BF4F]                			mov byte[bool_left2],al
  1256 00005CB2 C606[BA4F]14            			mov byte[bool_initial],20
  1257 00005CB7 C606[BC4F]28            			mov byte[bool_right],40
  1258 00005CBC C606[BD4F]28            			mov byte[bool_left],40			
  1259 00005CC1 58                      			pop ax
  1260                                  				
  1261                                  			
  1262 00005CC2 B82600                  			mov ax,38
  1263 00005CC5 50                      			push ax
  1264 00005CC6 B80000                  			mov ax,0
  1265 00005CC9 50                      			push ax
  1266 00005CCA E838F9                  			call segmentclear
  1267                                  			
  1268 00005CCD B81F00                  			mov ax,31
  1269 00005CD0 50                      			push ax
  1270 00005CD1 B80000                  			mov ax,0
  1271 00005CD4 50                      			push ax
  1272 00005CD5 E8CDFC                              call restoreScreen
  1273                                  			
  1274 00005CD8 E861FE                  			call check_for_carrot            
  1275 00005CDB A0[D84F]                		    mov al,byte[score]
  1276 00005CDE 0430                    			add al,48
  1277 00005CE0 B40F                    			mov ah,0xf
  1278 00005CE2 BFE01F                  			mov di,8160
  1279 00005CE5 268905                  			mov [es:di],ax
  1280                                  			
  1281 00005CE8 E810FE                  			call check_below                                        
  1282 00005CEB A0[B44F]                			mov al,[bool_check]
  1283 00005CEE 3C00                    			cmp al,0
  1284 00005CF0 0F84D900                			jz termination               ;clrscr						  ;call instead og jump
  1285 00005CF4 E8E2FD                              call platform_down	
  1286 00005CF7 803E[D74F]03            		    cmp byte[rand_color],3
  1287 00005CFC 7507                    			jnz kb1
  1288 00005CFE 2EC706[0750]0000        			mov word[cs:counter],0
  1289                                  			
  1290                                  			kb1:
  1291                                              
  1292 00005D05 B82300                              mov ax,35
  1293 00005D08 50                      		    push ax
  1294 00005D09 B80000                  		    mov ax,0
  1295 00005D0C 50                      		    push ax
  1296 00005D0D E820FD                  		    call print_platform2			
  1297                                  
  1298 00005D10 E89A01                  			call print_carrot
  1299                                  			;pass a random number in bool_right and left
  1300                                  			
  1301 00005D13 EB18                    			jmp exit ; leave interrupt routine
  1302                                              nextcmp:
  1303 00005D15 3C01                    			cmp al, 0x01    
  1304 00005D17 750D                    			jne nomatch
  1305 00005D19 BA[1350]                            mov dx,exc_message
  1306 00005D1C B409                    			mov ah,9
  1307 00005D1E CD21                    			int 0x21
  1308 00005D20 E814F9                  	        call delay
  1309 00005D23 E9A700                  			jmp termination
  1310                                  
  1311                                  			
  1312                                  		
  1313 00005D26 07                      nomatch:	pop es
  1314 00005D27 58                      			pop ax
  1315 00005D28 2EFF2E[DF4F]            			jmp far [cs:oldisr] ; call the original ISR
  1316                                  
  1317                                  exit:	
  1318 00005D2D B020                                mov al, 0x20
  1319 00005D2F E620                    			out 0x20, al ; send EOI to PIC
  1320 00005D31 07                      			pop es
  1321 00005D32 58                      			pop ax
  1322 00005D33 CF                      			iret ; return from interrupt	
  1323                                  			
  1324                                  initial_left:
  1325 00005D34 E8CBFE                  call rabbit_platform_shift_left
  1326 00005D37 FE0E[BA4F]              dec byte[bool_initial]
  1327 00005D3B E95001                  jmp y1		
  1328                                  
  1329                                  shifter_right:
  1330 00005D3E E8F7FE                  call rabbit_platform_shift_right
  1331 00005D41 E95301                  jmp y2
  1332                                  
  1333                                  
  1334                                  later_shift_right:
  1335 00005D44 FE0E[BC4F]              dec byte[bool_right]
  1336 00005D48 803E[BC4F]00            cmp byte[bool_right],0
  1337 00005D4D 77EF                    ja shifter_right
  1338 00005D4F C606[BD4F]28            mov byte[bool_left],40
  1339 00005D54 E94001                  jmp y2
  1340                                   
  1341                                  
  1342                                  shifter_left:
  1343 00005D57 E8A8FE                  call rabbit_platform_shift_left
  1344 00005D5A E94301                  jmp y3
  1345                                  ;ret 2 
  1346                                  
  1347                                  later_shift_left:
  1348 00005D5D FE0E[BD4F]              dec byte[bool_left]
  1349 00005D61 803E[BD4F]00            cmp byte[bool_left],0
  1350 00005D66 77EF                    ja shifter_left
  1351 00005D68 C606[BC4F]28            mov byte[bool_right],40
  1352 00005D6D E93001                  jmp y3
  1353                                  
  1354                                  later_shift_right_more:
  1355 00005D70 803E[BC4F]00            cmp byte[bool_right],0
  1356 00005D75 77CD                    ja later_shift_right
  1357 00005D77 E91D01                  jmp y2
  1358                                  
  1359                                  ;--------------------------------------------
  1360                                  lower_segment_shifting:
  1361 00005D7A 803E[BB4F]00            cmp byte[bool_initial2],0
  1362 00005D7F 7E11                    jle  later_shift_right_more2
  1363                                  y5:
  1364 00005D81 803E[BE4F]00            cmp byte[bool_right2],0
  1365 00005D86 7E32                    jle later_shift_left2
  1366 00005D88 E892FE                  call rabbit_platform_shift_left2
  1367 00005D8B FE0E[BB4F]              dec byte[bool_initial2]
  1368                                  y6:
  1369 00005D8F E91701                  jmp y4
  1370                                  
  1371                                  later_shift_right_more2:
  1372 00005D92 803E[BE4F]00            cmp byte[bool_right2],0
  1373 00005D97 7702                    ja later_shift_right2
  1374 00005D99 EBE6                    jmp y5
  1375                                  
  1376                                  later_shift_right2:
  1377 00005D9B FE0E[BE4F]              dec byte[bool_right2]
  1378 00005D9F 803E[BE4F]00            cmp byte[bool_right2],0
  1379 00005DA4 7708                    ja shifter_right2
  1380 00005DA6 C606[BF4F]28            mov byte[bool_left2],40
  1381 00005DAB E9FB00                  jmp y4
  1382                                  shifter_right2:
  1383 00005DAE E8A2FE                  call rabbit_platform_shift_right2
  1384 00005DB1 E9F500                  jmp y4
  1385                                  
  1386                                  
  1387                                  shifter_left2:
  1388 00005DB4 E866FE                  call rabbit_platform_shift_left2
  1389 00005DB7 E9EF00                  jmp y4
  1390                                  ;ret 2 
  1391                                  
  1392                                  later_shift_left2:
  1393 00005DBA FE0E[BF4F]              dec byte[bool_left2]
  1394 00005DBE 803E[BF4F]00            cmp byte[bool_left2],0
  1395 00005DC3 77EF                    ja shifter_left2
  1396 00005DC5 C606[BE4F]28            mov byte[bool_right2],40
  1397 00005DCA E9DC00                  jmp y4
  1398                                  
  1399                                  
  1400                                  termination:
  1401 00005DCD B82A00                  mov ax,42
  1402 00005DD0 50                      push ax
  1403 00005DD1 B80000                  mov ax,0
  1404 00005DD4 50                      push ax
  1405 00005DD5 B80000                  mov ax,0
  1406 00005DD8 50                      push ax
  1407 00005DD9 E80FFA                  call set_road	
  1408 00005DDC E858F8                  call delay
  1409 00005DDF E855F8                  call delay
  1410 00005DE2 E852F8                  call delay
  1411 00005DE5 E84FF8                  call delay
  1412 00005DE8 E84CF8                  call delay
  1413 00005DEB E849F8                  call delay
  1414 00005DEE E846F8                  call delay
  1415 00005DF1 E871F7                  call clrscr
  1416                                  ; mov bh,00h
  1417                                  ; mov bl,3
  1418                                  ; mov ah,0bh
  1419                                  ; int 0x10
  1420                                  
  1421 00005DF4 B90C00                  mov cx,12
  1422 00005DF7 BE0000                  mov si,0
  1423                                  figure_loopt:
  1424 00005DFA A1[0A51]                mov ax,[fig_iteratorx]
  1425 00005DFD 50                      push ax
  1426 00005DFE B83700                  mov ax,55
  1427 00005E01 50                      push ax
  1428 00005E02 B8[9C50]                mov ax,naruto
  1429 00005E05 01F0                    add ax,si
  1430 00005E07 50                      push ax
  1431 00005E08 E85CF9                  call print_figure
  1432 00005E0B FE06[0A51]              inc byte[fig_iteratorx]
  1433 00005E0F 83C609                  add si,9
  1434 00005E12 E2E6                    loop figure_loopt
  1435                                  
  1436 00005E14 B81800                  mov ax,24
  1437 00005E17 50                      push ax
  1438 00005E18 B80000                  mov ax,0
  1439 00005E1B 50                      push ax
  1440 00005E1C B88C00                  mov ax,0x8c
  1441 00005E1F 50                      push ax
  1442 00005E20 E8C8F9                  call set_road	
  1443                                  
  1444 00005E23 B413                    mov ah, 0x13		; service 13 - print string
  1445 00005E25 B001                    mov al, 1			
  1446 00005E27 B700                    mov bh, 0			; output on page 0
  1447 00005E29 B309                    mov bl,9   ;07h              ;47 
  1448 00005E2B B90600                  mov cx, 6			; length of string
  1449 00005E2E BA2313                  mov dx, 0x1323		; row 10 column 3
  1450 00005E31 1E                      push ds
  1451 00005E32 07                      pop es
  1452 00005E33 BD[D94F]                mov bp, score_message
  1453 00005E36 B030                    mov al,48
  1454 00005E38 0006[D84F]              add byte[score],al
  1455 00005E3C CD10                    int 0x10
  1456 00005E3E B413                    mov ah, 0x13		; service 13 - print string
  1457 00005E40 B001                    mov al, 1			
  1458 00005E42 B700                    mov bh, 0			; output on page 0
  1459 00005E44 B302                    mov bl,2   ;07h              ;47        ; 01000111B	; normal attrib
  1460 00005E46 B90100                  mov cx, 1			; length of string
  1461 00005E49 BA3013                  mov dx, 0x1330		; row 10 column 3
  1462 00005E4C 1E                      push ds
  1463 00005E4D 07                      pop es
  1464 00005E4E BD[D84F]                mov bp, score
  1465 00005E51 CD10                    int 0x10
  1466 00005E53 B413                    mov ah, 0x13		; service 13 - print string
  1467 00005E55 B001                    mov al, 1			
  1468 00005E57 B700                    mov bh, 0			; output on page 0
  1469 00005E59 B302                    mov bl,2   ;07h              ;47        ; 01000111B	; normal attrib
  1470 00005E5B B90A00                  mov cx, 10			; length of string
  1471 00005E5E BA2311                  mov dx, 0x1123		; row 10 column 3
  1472 00005E61 1E                      push ds
  1473 00005E62 07                      pop es
  1474 00005E63 BD[0950]                mov bp, exit_message
  1475 00005E66 CD10                    int 0x10
  1476                                  
  1477 00005E68 B80031                  		mov ax, 0x3100 ; terminate and stay resident
  1478 00005E6B CD21                    		int 0x21 
  1479                                  Animation:
  1480 00005E6D E8BCFA                  		call animate
  1481 00005E70 E862FA                  		call animate_left
  1482 00005E73 2E803E[0750]04          		cmp byte[cs:counter],4
  1483 00005E79 7503                    		jne ya1
  1484 00005E7B E94FFF                  		jmp termination
  1485                                  		ya1:
  1486 00005E7E 803E[E74F]01            		cmp byte[bool_greenmov],1
  1487 00005E83 741B                    		jz y3
  1488 00005E85 803E[BA4F]00            		cmp byte[bool_initial],0
  1489 00005E8A 0F85A6FE                		jnz initial_left	
  1490                                          y1:		
  1491 00005E8E 803E[BA4F]00            		cmp byte[bool_initial],0
  1492 00005E93 0F8ED9FE                		jle  later_shift_right_more
  1493                                  		y2:
  1494 00005E97 803E[BC4F]00            		cmp byte[bool_right],0
  1495 00005E9C 0F8EBDFE                		jle later_shift_left
  1496                                  		y3:
  1497 00005EA0 803E[C04F]01            		cmp byte[bool_jump_occured],1
  1498 00005EA5 0F84D1FE                		je lower_segment_shifting
  1499                                  
  1500                                  		y4:
  1501 00005EA9 E88BF7                  		call delay
  1502 00005EAC C3                      		ret
  1503                                  		
  1504                                  		
  1505                                  print_carrot:
  1506 00005EAD 50                                  push ax
  1507 00005EAE 06                      			push es
  1508 00005EAF 57                      			push di
  1509 00005EB0 53                      			push bx
  1510 00005EB1 B42C                    			mov ah, 2Ch    ; AH = Function to get system time
  1511 00005EB3 CD21                    			int 21h        ; Call DOS to get time
  1512 00005EB5 8816[D54F]              			mov byte [seed], dl   ; Store seconds as the seedd
  1513                                  		    ; Generate a random number
  1514 00005EB9 8A16[0550]              			mov dl,byte[tickcount]
  1515 00005EBD A0[0550]                			mov al,byte[tickcount] ;[seed]  ; Load the current seed
  1516 00005EC0 30E0                    			xor al, ah      ; XOR with high byte of time for more randomness
  1517 00005EC2 30D0                    			xor al, dl      ; XOR with seconds
  1518 00005EC4 D0C8                    			ror al, 1       ; Rotate right for randomness
  1519 00005EC6 30D0                    			xor al, dl      ; XOR again for more randomness
  1520 00005EC8 2403                    			and al, 0x03    ; Ensure it's a 2-bit value (values 0 to 3)
  1521                                  
  1522                                  			; Add 1 to the random number to get a value between 1 and 4
  1523 00005ECA FEC0                    			inc al
  1524 00005ECC A2[D64F]                			mov [rand_carrot],al
  1525                                  			
  1526 00005ECF B800B8                  			mov ax,0xb800
  1527 00005ED2 8EC0                    			mov es,ax
  1528 00005ED4 BF1824                  			mov di,9240
  1529 00005ED7 83C768                  			add di,104
  1530 00005EDA 803E[D84F]02            			cmp byte[score],2
  1531 00005EDF 7504                    			jnz pc1
  1532 00005EE1 8B3E[E54F]              			mov di,[platform_location]
  1533                                  			pc1:
  1534 00005EE5 8B1E[D64F]              			mov bx,[rand_carrot]
  1535 00005EE9 01FB                    			add bx,di
  1536 00005EEB 891E[E34F]              			mov word[carrot_location],bx
  1537 00005EEF 803E[D64F]01            			cmp byte[rand_carrot],1
  1538 00005EF4 7413                    			jz  carrot_1
  1539 00005EF6 803E[D64F]02            			cmp byte[rand_carrot],2
  1540 00005EFB 7436                    			jz  carrot_2
  1541 00005EFD 803E[D64F]03            			cmp byte[rand_carrot],3
  1542 00005F02 7459                    			jz  carrot_3
  1543                                  			
  1544                                  			r2point:
  1545                                  			
  1546 00005F04 5B                      			pop bx
  1547 00005F05 5F                      			pop di
  1548 00005F06 07                      			pop es
  1549 00005F07 58                      			pop ax
  1550 00005F08 C3                      			ret
  1551                                  			
  1552                                  			carrot_1:
  1553 00005F09 81EF0801                			sub di,264
  1554 00005F0D 83C702                  			add di,2
  1555 00005F10 B444                    			mov ah,0x44
  1556 00005F12 B020                    			mov al,' '
  1557 00005F14 268905                  			mov [es:di],ax
  1558 00005F17 83C702                  			add di,2
  1559 00005F1A 268905                  			mov [es:di],ax
  1560 00005F1D 83C702                  			add di,2
  1561 00005F20 268905                  			mov [es:di],ax
  1562 00005F23 83C702                  			add di,2
  1563 00005F26 81EF0C01                			sub di,268
  1564 00005F2A B02A                    			mov al,'*'
  1565 00005F2C B42C                    			mov ah,44
  1566 00005F2E 268905                  			mov [es:di],ax
  1567 00005F31 EBD1                    			jmp r2point
  1568                                  			
  1569                                  			carrot_2:
  1570 00005F33 81EF0801                			sub di,264
  1571 00005F37 83C708                  			add di,8
  1572 00005F3A B444                    			mov ah,0x44
  1573 00005F3C B020                    			mov al,' '
  1574 00005F3E 268905                  			mov [es:di],ax
  1575 00005F41 83C702                  			add di,2
  1576 00005F44 268905                  			mov [es:di],ax
  1577 00005F47 83C702                  			add di,2
  1578 00005F4A 268905                  			mov [es:di],ax
  1579 00005F4D 83C702                  			add di,2
  1580 00005F50 81EF0C01                			sub di,268
  1581 00005F54 B02A                    			mov al,'*'
  1582 00005F56 B42C                    			mov ah,44
  1583 00005F58 268905                  			mov [es:di],ax
  1584 00005F5B EBA7                    			jmp r2point
  1585                                  
  1586                                  			carrot_3:
  1587 00005F5D 81EF0801                			sub di,264
  1588 00005F61 83C71C                  			add di,28
  1589 00005F64 B444                    			mov ah,0x44
  1590 00005F66 B020                    			mov al,' '
  1591 00005F68 268905                  			mov [es:di],ax
  1592 00005F6B 83C702                  			add di,2
  1593 00005F6E 268905                  			mov [es:di],ax
  1594 00005F71 83C702                  			add di,2
  1595 00005F74 268905                  			mov [es:di],ax
  1596 00005F77 83C702                  			add di,2
  1597 00005F7A 81EF0C01                			sub di,268
  1598 00005F7E B02A                    			mov al,'*'
  1599 00005F80 B42C                    			mov ah,44
  1600 00005F82 268905                  			mov [es:di],ax
  1601 00005F85 E97CFF                  			jmp r2point			
  1602                                  			
  1603                                  			; check_carrot:
  1604                                  			; pusha
  1605                                  			
  1606                                  			
  1607                                  			; popa
  1608                                  			; ret
  1609                                  			
  1610                                  			
  1611                                  main_screen:
  1612 00005F88 B81200                  mov ax, 0x0012 ; set 320x200 graphics mode;800-600
  1613 00005F8B CD10                    int 0x10 ; bios video services
  1614                                  
  1615                                  
  1616 00005F8D B700                    mov bh,00h
  1617 00005F8F B308                    mov bl,8               ;16     ;54
  1618 00005F91 B40B                    mov ah,0bh
  1619 00005F93 CD10                    int 0x10
  1620 00005F95 B8040C                  mov ax, 0x0C04 ; put pixel in white color
  1621 00005F98 31DB                    xor bx, bx ; page number 0
  1622                                  
  1623 00005F9A B96400                  mov cx, 100
  1624                                  
  1625 00005F9D B413                    mov ah, 0x13		; service 13 - print string
  1626 00005F9F B001                    mov al, 1			 
  1627 00005FA1 B700                    mov bh, 0			; output on page 0
  1628 00005FA3 B307                    mov bl,07h              ;47             ; 01000111B	; normal attrib
  1629 00005FA5 B93B00                  mov cx, 59			; length of string
  1630 00005FA8 BA0804                  mov dx, 0x0408		; row 10 column 3
  1631 00005FAB BE[1751]                mov si,console
  1632 00005FAE 1E                      push ds
  1633 00005FAF 07                      pop es				; es=ds segment of string
  1634                                  c1:
  1635 00005FB0 89F5                    mov bp, si		; bp = offset of string	
  1636 00005FB2 80C601                  add dh,1		
  1637 00005FB5 CD10                    INT 0x10			; call BIOS video service
  1638 00005FB7 83C63B                  add si,59
  1639 00005FBA FE0E[1651]              dec byte[cit]
  1640 00005FBE 803E[1651]00            cmp byte[cit],0
  1641 00005FC3 75EB                    jnz c1
  1642                                  
  1643 00005FC5 B413                    mov ah, 0x13		; service 13 - print string
  1644 00005FC7 B001                    mov al, 1			
  1645 00005FC9 B700                    mov bh, 0			; output on page 0
  1646 00005FCB B32F                    mov bl,47   ;07h              ;47        ; 01000111B	; normal attrib
  1647 00005FCD B90700                  mov cx, 7			; length of string
  1648 00005FD0 BA2313                  mov dx, 0x1323		; row 10 column 3
  1649 00005FD3 1E                      push ds
  1650 00005FD4 07                      pop es
  1651 00005FD5 BD[0B51]                mov bp, message
  1652 00005FD8 CD10                    int 0x10
  1653                                  
  1654 00005FDA E8B2F5                  call border
  1655                                  ;----------------------------------------------------
  1656                                  
  1657 00005FDD B413                    mov ah, 0x13		; service 13 - print string
  1658 00005FDF B001                    mov al, 1			
  1659 00005FE1 B700                    mov bh, 0			; output on page 0
  1660 00005FE3 8A1E[6355]              mov bl,[font_att]   ;07h              ;47        ; 01000111B	; normal attrib
  1661 00005FE7 B91200                  mov cx, 18			; length of string
  1662 00005FEA BA3C01                  mov dx, 0x013c		; row 10 column 3
  1663 00005FED 1E                      push ds
  1664 00005FEE 07                      pop es
  1665 00005FEF BD[0255]                mov bp, name1
  1666 00005FF2 CD10                    int 0x10
  1667                                  
  1668 00005FF4 B413                    mov ah, 0x13		; service 13 - print string
  1669 00005FF6 B001                    mov al, 1			
  1670 00005FF8 B700                    mov bh, 0			; output on page 0
  1671 00005FFA 8A1E[6355]              mov bl,[font_att]   ;07h              ;47        ; 01000111B	; normal attrib
  1672 00005FFE B90800                  mov cx, 8			; length of string
  1673 00006001 BA3C02                  mov dx, 0x023c		; row 10 column 3
  1674 00006004 1E                      push ds
  1675 00006005 07                      pop es
  1676 00006006 BD[2055]                mov bp, roll1
  1677 00006009 CD10                    int 0x10
  1678                                  
  1679 0000600B B413                    mov ah, 0x13		; service 13 - print string
  1680 0000600D B001                    mov al, 1			
  1681 0000600F B700                    mov bh, 0			; output on page 0
  1682 00006011 8A1E[6355]              mov bl,[font_att]   ;07h              ;47        ; 01000111B	; normal attrib
  1683 00006015 B90C00                  mov cx, 12			; length of string
  1684 00006018 BA3C03                  mov dx, 0x033c		; row 10 column 3
  1685 0000601B 1E                      push ds
  1686 0000601C 07                      pop es
  1687 0000601D BD[1455]                mov bp, name2
  1688 00006020 CD10                    int 0x10
  1689                                  
  1690 00006022 B413                    mov ah, 0x13		; service 13 - print string
  1691 00006024 B001                    mov al, 1			
  1692 00006026 B700                    mov bh, 0			; output on page 0
  1693 00006028 8A1E[6355]              mov bl,[font_att]   ;07h              ;47        ; 01000111B	; normal attrib
  1694 0000602C B90800                  mov cx, 8			; length of string
  1695 0000602F BA3C04                  mov dx, 0x043c		; row 10 column 3
  1696 00006032 1E                      push ds
  1697 00006033 07                      pop es
  1698 00006034 BD[2855]                mov bp, roll2
  1699 00006037 CD10                    int 0x10
  1700                                  
  1701                                  ; mov ah, 0x13		; service 13 - print string
  1702                                  ; mov al, 1			
  1703                                  ; mov bh, 0			; output on page 0
  1704                                  ; mov bl,[font_att]   ;07h              ;47        ; 01000111B	; normal attrib
  1705                                  ; mov cx, 11			; length of string
  1706                                  ; mov dx, 0x0130		; row 10 column 3
  1707                                  ; push ds
  1708                                  ; pop es
  1709                                  ; mov bp, p
  1710                                  ; int 0x10
  1711                                  
  1712 00006039 B413                    mov ah, 0x13		; service 13 - print string
  1713 0000603B B001                    mov al, 1			
  1714 0000603D B700                    mov bh, 0			; output on page 0
  1715 0000603F B30D                    mov bl,13      ;07h              ;47        ; 01000111B	; normal attrib
  1716 00006041 B90E00                  mov cx, 14			; length of string
  1717 00006044 BA1F06                  mov dx, 0x061f		; row 10 column 3
  1718 00006047 1E                      push ds
  1719 00006048 07                      pop es
  1720 00006049 BD[5555]                mov bp, game_name
  1721 0000604C CD10                    int 0x10
  1722                                  
  1723 0000604E B413                    mov ah, 0x13		; service 13 - print string
  1724 00006050 B001                    mov al, 1			
  1725 00006052 B700                    mov bh, 0			; output on page 0
  1726 00006054 B32F                    mov bl,47   ;07h              ;47        ; 01000111B	; normal attrib
  1727 00006056 B91A00                  mov cx, 26			; length of string
  1728 00006059 BA1A18                  mov dx, 0x181a		; row 10 column 3
  1729 0000605C 1E                      push ds
  1730 0000605D 07                      pop es
  1731 0000605E BD[3B55]                mov bp, start_message
  1732 00006061 CD10                    int 0x10
  1733                                  
  1734 00006063 B400                    mov ah,0
  1735 00006065 CD16                    int 0x16
  1736                                  
  1737                                  
  1738 00006067 B700                    mov bh,00h
  1739 00006069 B308                    mov bl,8               ;16     ;54
  1740 0000606B B40B                    mov ah,0bh
  1741 0000606D CD10                    int 0x10
  1742 0000606F B8040C                  mov ax, 0x0C04 ; put pixel in white color
  1743 00006072 31DB                    xor bx, bx ; page number 0
  1744                                  
  1745 00006074 B9FA00                  mov cx, 250
  1746                                  		
  1747 00006077 C606[1551]64            mov byte[it3],100
  1748                                  l3:
  1749 0000607C C606[1451]0A            mov byte[it2],10
  1750 00006081 BA4001                  mov dx,320
  1751 00006084 83C101                  add cx,1
  1752 00006087 E8F8F4                  call delayx
  1753 0000608A CD10                    l2:int 0x10
  1754 0000608C 42                      inc dx
  1755 0000608D FE0E[1451]              dec byte[it2]
  1756 00006091 803E[1451]00            cmp byte[it2],0
  1757 00006096 75F2                    jnz l2
  1758 00006098 FE0E[1551]              dec byte[it3]
  1759 0000609C 803E[1551]00            cmp byte[it3],0
  1760 000060A1 75D9                    jnz l3
  1761                                  
  1762                                  
  1763                                  
  1764                                  
  1765                                  ;-------------------------------------------------------------------------------------------------
  1766 000060A3 B400                            mov AH,0x00
  1767 000060A5 B054                            mov al, 0x54
  1768 000060A7 CD10                            int 0x10
  1769 000060A9 E88BF5                  		call delay
  1770 000060AC E888F5                  		call delay
  1771 000060AF E885F5                  		call delay
  1772 000060B2 E882F5                  		call delay
  1773                                  
  1774                                  
  1775                                          ;call clrscr ; call the clrscr subroutine
  1776                                  ; mov bh,00h
  1777                                  ; mov bl,0
  1778                                  ; mov ah,0bh
  1779                                  ; int 0x10
  1780                                  
  1781 000060B5 B80310                  		mov ax,1003h
  1782 000060B8 B300                    		mov bl,0
  1783 000060BA CD10                    		int 0x10
  1784                                  		
  1785 000060BC B80E00                  		mov ax, 14
  1786 000060BF 50                      		push ax				; push r position............[bp+8]
  1787 000060C0 B81000                  		mov ax, 16
  1788 000060C3 50                      		push ax				; push c position............[bp+6]
  1789 000060C4 B86000                  		mov ax, 0x60			; blue on black attribute
  1790 000060C7 50                      		push ax				; push attribute............[bp+4]		
  1791 000060C8 E87CF5                  		call set_building
  1792                                  		
  1793 000060CB B80600                  		mov ax, 6
  1794 000060CE 50                      		push ax				; push r position............[bp+10]
  1795 000060CF B81A00                  		mov ax, 26
  1796 000060D2 50                      		push ax				; push c position............[bp+8]
  1797 000060D3 B80100                  		mov ax, 0x01			; blue on black attribute
  1798 000060D6 50                      		push ax				; push attribute............[bp+6]
  1799 000060D7 FF36[9A44]              		push word [length]	; push message length ....[bp+4]		
  1800 000060DB E8AAF5                  		call set_window
  1801                                  		
  1802 000060DE B80900                  		mov ax, 9
  1803 000060E1 50                      		push ax				; push r position............[bp+10]
  1804 000060E2 B81A00                  		mov ax, 26
  1805 000060E5 50                      		push ax				; push c position............[bp+8]
  1806 000060E6 B80100                  		mov ax, 0x01			; blue on black attribute
  1807 000060E9 50                      		push ax				; push attribute............[bp+6]		
  1808 000060EA FF36[9A44]              		push word [length]	; push message length ....[bp+4]		
  1809 000060EE E897F5                  		call set_window
  1810                                  		
  1811 000060F1 B80E00                  		mov ax, 14
  1812 000060F4 50                      		push ax				; push r position............[bp+8]
  1813 000060F5 B83800                  		mov ax, 56
  1814 000060F8 50                      		push ax				; push c position............[bp+6]
  1815 000060F9 B80100                  		mov ax, 0x01			; blue on black attribute
  1816 000060FC 50                      		push ax				; push attribute............[bp+4]		
  1817 000060FD E8BAF5                  		call set_door
  1818                                  		
  1819 00006100 B80D00                  		mov ax, 13
  1820 00006103 50                      		push ax				; push r position............[bp+8]
  1821 00006104 B87800                  		mov ax, 120
  1822 00006107 50                      		push ax				; push c position............[bp+6]
  1823 00006108 B82000                  		mov ax, 0x20			; blue on black attribute
  1824 0000610B 50                      		push ax				; push attribute............[bp+4]
  1825                                  		
  1826 0000610C E8ECF5                  		call set_moon
  1827 0000610F B80C00                  		mov ax, 12
  1828 00006112 50                      		push ax				; push r position............[bp+8]
  1829 00006113 B87300                  		mov ax, 115
  1830 00006116 50                      		push ax				; push c position............[bp+6]
  1831 00006117 B82000                  		mov ax, 0x20			; blue on black attribute
  1832 0000611A 50                      		push ax				; push attribute............[bp+4]
  1833                                  		
  1834 0000611B E8DDF5                  		call set_moon
  1835 0000611E B80D00                  		mov ax, 13
  1836 00006121 50                      		push ax				; push r position............[bp+8]
  1837 00006122 B86E00                  		mov ax, 110
  1838 00006125 50                      		push ax				; push c position............[bp+6]
  1839 00006126 B82000                  		mov ax, 0x20			; blue on black attribute
  1840 00006129 50                      		push ax				; push attribute............[bp+4]
  1841                                  		
  1842 0000612A E8CEF5                  		call set_moon
  1843 0000612D B80C00                  		mov ax, 12
  1844 00006130 50                      		push ax				; push r position............[bp+8]
  1845 00006131 B87D00                  		mov ax, 125
  1846 00006134 50                      		push ax				; push c position............[bp+6]
  1847 00006135 B82000                  		mov ax, 0x20			; blue on black attribute
  1848 00006138 50                      		push ax				; push attribute............[bp+4]
  1849                                  		
  1850 00006139 E8BFF5                  		call set_moon
  1851                                  		
  1852                                  		
  1853 0000613C B80F00                  mov ax,15
  1854 0000613F 50                      push ax
  1855 00006140 B80000                  mov ax,0
  1856 00006143 50                      push ax
  1857 00006144 B87700                  mov ax,0x77
  1858 00006147 50                      push ax
  1859 00006148 E8A0F6                  call set_road
  1860 0000614B B81C00                  mov ax,28
  1861 0000614E 50                      push ax
  1862 0000614F B80000                  mov ax,0
  1863 00006152 50                      push ax
  1864 00006153 B87700                  mov ax,0x77
  1865 00006156 50                      push ax
  1866 00006157 E891F6                  call set_road		
  1867                                  	
  1868                                  		
  1869 0000615A B90B00                  mov cx,11
  1870 0000615D BE0000                  mov si,0
  1871                                  figure_loop1:
  1872 00006160 A1[0851]                mov ax,[fig_iterator]
  1873 00006163 50                      push ax
  1874 00006164 B8C800                  mov ax,200
  1875 00006167 50                      push ax
  1876 00006168 B8[3950]                mov ax,ironman
  1877 0000616B 01F0                    add ax,si
  1878 0000616D 50                      push ax
  1879 0000616E E8F6F5                  call print_figure
  1880 00006171 FE06[0851]              inc byte[fig_iterator]
  1881 00006175 83C609                  add si,9
  1882 00006178 E2E6                    loop figure_loop1
  1883                                  
  1884 0000617A B90C00                  mov cx,12
  1885 0000617D BE0000                  mov si,0
  1886                                  figure_loop2:
  1887 00006180 A1[0951]                mov ax,[fig_iterator2]
  1888 00006183 50                      push ax
  1889 00006184 B80000                  mov ax,0
  1890 00006187 50                      push ax
  1891 00006188 B8[9C50]                mov ax,naruto
  1892 0000618B 01F0                    add ax,si
  1893 0000618D 50                      push ax
  1894 0000618E E8D6F5                  call print_figure
  1895 00006191 FE06[0951]              inc byte[fig_iterator2]
  1896 00006195 83C609                  add si,9
  1897 00006198 E2E6                    loop figure_loop2
  1898                                  		;--------------------------------------------------
  1899                                  
  1900 0000619A B81E00                  mov ax,30
  1901 0000619D 50                      push ax
  1902 0000619E B87200                  mov ax,114
  1903 000061A1 50                      push ax
  1904 000061A2 B80C00                  mov ax,12
  1905 000061A5 50                      push ax
  1906 000061A6 B8[D94F]                mov ax,score_message
  1907 000061A9 50                      push ax
  1908 000061AA B80600                  mov ax,6
  1909 000061AD 50                      push ax
  1910 000061AE E86FF6                  call set_van
  1911                                  		
  1912                                  		
  1913 000061B1 B80200                  		mov ax, 2
  1914 000061B4 50                      		push ax				; push r position............[bp+12]
  1915 000061B5 B80000                  		mov ax, 0
  1916 000061B8 50                      		push ax				; push c position............[bp+10]
  1917 000061B9 B88F00                  		mov ax, 0x8f			; blue on black attribute
  1918 000061BC 50                      		push ax				; push attribute............[bp+8]
  1919 000061BD E898F6                  		call print_stars
  1920                                  
  1921                                  
  1922 000061C0 BB0400                  		mov bx,4
  1923 000061C3 BE0000                  		mov si,0
  1924                                  		print_rabbit:		
  1925 000061C6 A1[6045]                		mov ax,[rabbitindex]
  1926 000061C9 50                      		push ax
  1927 000061CA B83C00                  		mov ax,60
  1928 000061CD 50                      		push ax
  1929 000061CE A1[5C45]                		mov ax,[rabbit_attribtue]
  1930 000061D1 50                      		push ax
  1931 000061D2 B8[C14F]                        mov ax,rabbit_boy
  1932 000061D5 01F0                            add ax,si		
  1933 000061D7 50                      		push ax
  1934 000061D8 B80500                  		mov ax,5
  1935 000061DB 50                      		push ax
  1936 000061DC E841F6                  		call set_van
  1937 000061DF FE06[6045]              		inc byte[rabbitindex]
  1938 000061E3 83C605                  		add si,5
  1939 000061E6 83EB01                  		sub bx,1
  1940 000061E9 75DB                    		jnz print_rabbit
  1941                                  		
  1942 000061EB B800B8                  		mov ax,0xb800
  1943 000061EE 8EC0                    		mov es,ax
  1944 000061F0 BFA827                  		mov di,10152
  1945 000061F3 B020                    		mov al,' '
  1946 000061F5 B42C                    		mov ah,44
  1947 000061F7 83C702                  		add di,2
  1948 000061FA 268905                  		mov [es:di],ax
  1949 000061FD 83C704                  		add di,4
  1950 00006200 268905                  		mov [es:di],ax
  1951 00006203 81C70201                		add di,258
  1952 00006207 268905                  		mov [es:di],ax
  1953 0000620A B02A                    		mov al,'*'
  1954 0000620C B44D                    		mov ah,77
  1955 0000620E 83C702                  		add di,2
  1956 00006211 268905                  		mov [es:di],ax
  1957 00006214 83C702                  		add di,2
  1958 00006217 B020                    		mov al,' '
  1959 00006219 B42C                    		mov ah,44
  1960 0000621B 268905                  		mov [es:di],ax
  1961 0000621E 83C702                  		add di,2
  1962 00006221 B02A                    		mov al,'*'
  1963 00006223 B44D                    		mov ah,77
  1964 00006225 268905                  		mov [es:di],ax
  1965 00006228 B020                    		mov al,' '
  1966 0000622A B42C                    		mov ah,44
  1967 0000622C 83C702                  		add di,2
  1968 0000622F 268905                  		mov [es:di],ax
  1969 00006232 81C70001                		add di,256
  1970 00006236 268905                  		mov [es:di],ax
  1971 00006239 83C702                  		add di,2
  1972 0000623C 268905                  		mov [es:di],ax
  1973 0000623F 83C702                  		add di,2
  1974 00006242 268905                  		mov [es:di],ax
  1975 00006245 83C702                  		add di,2
  1976 00006248 268905                  		mov [es:di],ax
  1977 0000624B 83C702                  		add di,2
  1978 0000624E 268905                  		mov [es:di],ax
  1979 00006251 81C70001                		add di,256
  1980                                  		; mov [es:di],ax
  1981 00006255 83C702                  		 add di,2
  1982 00006258 268905                  		mov [es:di],ax
  1983 0000625B 83C702                  		add di,2
  1984 0000625E B05E                    		mov al,'^'
  1985 00006260 B42C                    		mov ah,44
  1986 00006262 268905                  		mov [es:di],ax
  1987 00006265 83C702                  		add di,2
  1988 00006268 B020                    		mov al,' '
  1989 0000626A B42C                    		mov ah,44
  1990 0000626C 268905                  		mov [es:di],ax
  1991                                  		; add di,2
  1992                                  		; mov [es:di],ax
  1993                                  	
  1994 0000626F B82300                  		mov ax,35
  1995 00006272 50                      		push ax
  1996 00006273 B80000                  		mov ax,0
  1997 00006276 50                      		push ax
  1998 00006277 E889F7                  		call print_platform
  1999                                  		
  2000                                  
  2001                                  		
  2002 0000627A C3                      ret        			   
  2003                                  ; timer:		push ax
  2004                                              ; inc word [cs:tickcount]; increment tick count
  2005                                              ; cmp word[cs:tickcount],18
  2006                                  			; jnz y
  2007                                  			; inc word[cs:counter]
  2008                                  			; push word [cs:counter]
  2009                                  
  2010                                  			; call printnum ; print tick count
  2011                                              
  2012                                  			; y:
  2013                                  			; mov al, 0x20
  2014                                  			; out 0x20, al ; end of interrupt
  2015                                  
  2016                                  			; pop ax
  2017                                  			; iret ; return from interrupt
  2018                                  			
  2019                                  			;------------------------------------------------------
  2020                                  ; subroutine to print a number at top left of screen
  2021                                  ; takes the number to be printed as its parameter
  2022                                  ;------------------------------------------------------
  2023 0000627B 55                      printnum: push bp
  2024 0000627C 89E5                    mov bp, sp
  2025 0000627E 06                      push es
  2026 0000627F 50                      push ax
  2027 00006280 53                      push bx
  2028 00006281 51                      push cx
  2029 00006282 52                      push dx
  2030 00006283 57                      push di
  2031 00006284 B800B8                  mov ax, 0xb800
  2032 00006287 8EC0                    mov es, ax ; point es to video base
  2033 00006289 8B4604                  mov ax, [bp+4] ; load number in ax
  2034 0000628C BB0A00                  mov bx, 10 ; use base 10 for division
  2035 0000628F B90000                  mov cx, 0 ; initialize count of digits
  2036 00006292 BA0000                  nextdigit: mov dx, 0 ; zero upper half of dividend
  2037 00006295 F7F3                    div bx ; divide by 10
  2038 00006297 80C230                  add dl, 0x30 ; convert digit into ascii value
  2039 0000629A 52                      push dx ; save ascii value on stack
  2040 0000629B 41                      inc cx ; increment count of values
  2041 0000629C 83F800                  cmp ax, 0 ; is the quotient zero
  2042 0000629F 75F1                    jnz nextdigit ; if no divide it again
  2043 000062A1 BFF01E                  mov di, 7920 ; point di to 70th column
  2044 000062A4 5A                      nextpos: pop dx ; remove a digit from the stack
  2045 000062A5 B607                    mov dh, 0x07 ; use normal attribute
  2046                                  ;mov [es:di], dx ; print char on screen
  2047 000062A7 83C702                  add di, 2 ; move to next screen location
  2048 000062AA E2F8                    loop nextpos ; repeat for all digits on stack
  2049 000062AC 2EC706[0550]0000        mov word[cs:tickcount],0
  2050 000062B3 5F                      pop di
  2051 000062B4 5A                      pop dx
  2052 000062B5 59                      pop cx
  2053 000062B6 5B                      pop bx
  2054 000062B7 58                      pop ax 
  2055 000062B8 07                      pop es
  2056 000062B9 5D                      pop bp
  2057 000062BA C20200                  ret 2
  2058                                  
  2059                                  
  2060                                  ; clrscr:		push es
  2061                                  			; push ax
  2062                                  			; push di
  2063                                  
  2064                                  			; mov ax, 0xb800
  2065                                  			; mov es, ax					; point es to video base
  2066                                  			; mov di, 0					; point di to top left column
  2067                                  
  2068                                  ; nextloc:	mov word [es:di], 0x0720	; clear next char on screen
  2069                                  			; add di, 2					; move to next screen location
  2070                                  			; cmp di, 4000				; has the whole screen cleared
  2071                                  			; jne nextloc					; if no clear next position
  2072                                  
  2073                                  			; pop di
  2074                                  			; pop ax
  2075                                  			; pop es
  2076                                  			; ret
  2077                                  
  2078                                  ; delay:      push cx
  2079                                  			; mov cx, 0xFFFF
  2080                                  ; loop1:		loop loop1
  2081                                  			; mov cx, 0xFFFF
  2082                                  ; loop2:		loop loop2
  2083                                  			; pop cx
  2084                                  			; ret
  2085                                  
  2086                                  ;--------------------------------------------------------------------
  2087                                  ; subroutine to print a string at top left of screen
  2088                                  ; takes x position, y position, string attribute, address of string
  2089                                  ; and its length as parameters
  2090                                  ;--------------------------------------------------------------------
  2091 000062BD 55                      printstr1:	push bp
  2092 000062BE 89E5                    			mov bp, sp
  2093 000062C0 06                      			push es
  2094 000062C1 50                      			push ax
  2095 000062C2 51                      			push cx
  2096 000062C3 56                      			push si
  2097 000062C4 57                      			push di
  2098                                  
  2099 000062C5 B800B8                  			mov ax, 0xb800
  2100 000062C8 8EC0                    			mov es, ax				; point es to video base
  2101                                  
  2102 000062CA B050                    			mov al, 80				; load al with columns per row
  2103 000062CC F6660C                  			mul byte [bp+12]		; 80 x r
  2104 000062CF 03460A                  			add ax, [bp+10]			; word number (80xr) + c
  2105 000062D2 D1E0                    			shl ax, 1				; byte no (((80xr) + c)x2)
  2106                                  
  2107 000062D4 89C7                    			mov di, ax				; point di to required location
  2108 000062D6 8B7606                  			mov si, [bp+6]			; point si to string
  2109 000062D9 8B4E04                  			mov cx, [bp+4]			; load length of string in cx
  2110 000062DC 8A6608                  			mov ah, [bp+8]			; load attribute in ah
  2111                                  
  2112 000062DF 8A04                    nextchar:	mov al, [si]			; load next char of string
  2113 000062E1 268905                  			mov [es:di], ax			; show this char on screen
  2114 000062E4 83C702                  			add di, 2				; move to next screen location
  2115 000062E7 83C601                  			add si, 1				; move to next char in string
  2116 000062EA E84AF3                  			call delay
  2117 000062ED E2F0                    			loop nextchar			; repeat the operation cx times
  2118                                  
  2119 000062EF 5F                      			pop di
  2120 000062F0 5E                      			pop si
  2121 000062F1 59                      			pop cx
  2122 000062F2 58                      			pop ax
  2123 000062F3 07                      			pop es
  2124 000062F4 5D                      			pop bp
  2125 000062F5 C20A00                  			ret 10
  2126                                  
  2127                                  
  2128                                  RotateScreenRight:
  2129 000062F8 55                                  push bp
  2130 000062F9 89E5                    			mov bp,sp
  2131 000062FB 60                      			pusha 
  2132                                  			
  2133 000062FC B800B8                  			mov ax,0xb800
  2134 000062FF 8EC0                    			mov es,ax
  2135 00006301 B050                    			mov al,80
  2136 00006303 F66606                  			mul byte[bp+6]
  2137 00006306 034604                  			add ax,[bp+4]
  2138 00006309 D1E0                    			shl ax,1
  2139 0000630B B90500                  			mov cx,5
  2140 0000630E 89C7                    			mov di,ax
  2141 00006310 89C3                    			mov bx,ax
  2142 00006312 BE[2344]                			mov si,buffer
  2143                                  			
  2144                                  			outerloop:
  2145 00006315 BA0500                  			mov dx,5
  2146                                  			
  2147                                  			innerloop:
  2148 00006318 268B05                  			mov ax,[es:di]
  2149 0000631B 8904                    			mov [si],ax
  2150 0000631D 83C602                  			add si,2
  2151 00006320 83C702                  			add di,2
  2152 00006323 83EA01                  			sub dx,1
  2153 00006326 75F0                    			jnz innerloop
  2154 00006328 81C79600                			add di,150
  2155 0000632C E2E7                    			loop outerloop
  2156                                  			
  2157 0000632E 89DF                    			mov di,bx
  2158 00006330 B90500                  			mov cx,5
  2159 00006333 83C708                  		    add di,8
  2160 00006336 BE[2344]                			mov si,buffer
  2161                                  			
  2162                                  			outer_rotate:
  2163 00006339 BA0500                  			mov dx,5
  2164                                  			inner:
  2165 0000633C 8B04                    			mov ax,[si]
  2166 0000633E 268905                  			mov [es:di],ax
  2167 00006341 83C602                  			add si,2
  2168 00006344 81C7A000                			add di,160
  2169 00006348 83EA01                  			sub dx,1
  2170 0000634B 75EF                    			jnz inner
  2171 0000634D 81EF2203                			sub di,802
  2172 00006351 E2E6                    			loop outer_rotate
  2173                                  			
  2174 00006353 61                      			popa
  2175 00006354 5D                      			pop bp
  2176 00006355 C20400                  			ret 4
  2177                                  
  2178                                  ;;;;; COPY LINES 028-071 FROM EXAMPLE 10.1 (printnum) ;;;;;
  2179                                  ; subroutine to print a number on screen
  2180                                  ; takes the row no, column no, and number to be printed as parameters
  2181 00006358 55                      printnum1: push bp
  2182 00006359 89E5                    			mov bp, sp
  2183 0000635B 06                      			push es
  2184 0000635C 50                      			push ax
  2185 0000635D 53                      			push bx
  2186 0000635E 51                      			push cx
  2187 0000635F 52                      			push dx
  2188 00006360 57                      			push di
  2189 00006361 BF5000                  			mov di, 80 ; load di with columns per row
  2190 00006364 8B4608                  			mov ax, [bp+8] ; load ax with row number
  2191 00006367 F7E7                    			mul di ; multiply with columns per row
  2192 00006369 89C7                    			mov di, ax ; save result in di
  2193 0000636B 037E06                  			add di, [bp+6] ; add column number
  2194 0000636E D1E7                    			shl di, 1 ; turn into byte count
  2195 00006370 83C708                  			add di, 8 ; to end of number location
  2196 00006373 B800B8                  			mov ax, 0xb800
  2197 00006376 8EC0                    			mov es, ax ; point es to video base
  2198 00006378 8B4604                  			mov ax, [bp+4] ; load number in ax
  2199 0000637B BB1000                  			mov bx, 16 ; use base 16 for division
  2200 0000637E B90400                  			mov cx, 4 ; initialize count of digits
  2201 00006381 BA0000                  			nextdigit2: mov dx, 0 ; zero upper half of dividend
  2202 00006384 F7F3                    			div bx ; divide by 10
  2203 00006386 80C230                  			add dl, 0x30 ; convert digit into ascii value
  2204 00006389 80FA39                  			cmp dl, 0x39 ; is the digit an alphabet
  2205 0000638C 7603                    			jbe skipalpha ; no, skip addition
  2206 0000638E 80C207                  			add dl, 7 ; yes, make in alphabet code
  2207 00006391 B607                    			skipalpha: mov dh, 0x07 ; attach normal attribute
  2208 00006393 268915                  			mov [es:di], dx ; print char on screen
  2209 00006396 83EF02                  			sub di, 2 ; to previous screen location
  2210 00006399 E2E6                    			loop nextdigit2 ; if no divide it again
  2211 0000639B 5F                      			pop di
  2212 0000639C 5A                      			pop dx
  2213 0000639D 59                      			pop cx
  2214 0000639E 5B                      			pop bx
  2215 0000639F 58                      			pop ax
  2216 000063A0 07                      			pop es
  2217 000063A1 5D                      			pop bp
  2218 000063A2 C20600                  			ret 6
  2219                                  
  2220                                  
  2221                                  
  2222                                  ; mytask subroutine to be run as a thread
  2223                                  ; takes line number as parameter
  2224 000063A5 55                      mytask: push bp
  2225 000063A6 89E5                    		mov bp, sp
  2226 000063A8 83EC02                  		sub sp, 2 ; thread local variable
  2227 000063AB 50                      		push ax
  2228 000063AC 53                      		push bx
  2229 000063AD 8B4604                  		mov ax, [bp+4] ; load line number parameter
  2230 000063B0 BB4600                  		mov bx, 70 ; use column number 70
  2231 000063B3 C746FE0000              		mov word [bp-2], 0 ; initialize local variable
  2232                                  		
  2233                                  		 printagain: ;push ax ; line number
  2234                                  					; push bx ; column number
  2235                                  					; push word [bp-2] ; number to be printed
  2236                                  					; call printnum ; print the number
  2237                                  					; inc word [bp-2] ; increment the local variable
  2238                                  					; mov ax,0
  2239                                  					; push ax
  2240                                  					; mov ax,0
  2241                                  					; push ax
  2242                                  					; call RotateScreenRight
  2243                                  					j1:
  2244 000063B8 E8B2FA                  					call Animation	
  2245 000063BB EBFB                    					jmp j1
  2246 000063BD EBF9                    					jmp printagain ; infinitely print
  2247 000063BF 5B                      		pop bx
  2248 000063C0 58                      		pop ax
  2249 000063C1 89EC                    		mov sp, bp
  2250 000063C3 5D                      		pop bp
  2251 000063C4 C3                      		ret
  2252                                  		
  2253 000063C5 55                      mytask2:push bp
  2254 000063C6 89E5                    		mov bp, sp
  2255 000063C8 83EC02                  		sub sp, 2 ; thread local variable
  2256 000063CB 50                      		push ax
  2257 000063CC 53                      		push bx
  2258 000063CD 8B4604                  		mov ax, [bp+4] ; load line number parameter
  2259 000063D0 BB4600                  		mov bx, 70 ; use column number 70
  2260 000063D3 C746FE0000              		mov word [bp-2], 0 ; initialize local variable
  2261                                  		
  2262                                  		printagain2: ;push ax ; line number
  2263                                  					; push bx ; column number
  2264                                  					; push word [bp-2] ; number to be printed
  2265                                  					; call printnum ; print the number
  2266                                  					; inc word [bp-2] ; increment the local variable
  2267 000063D8 B0B6                    mov al, 0b6h
  2268 000063DA E643                    out 43h, al
  2269                                  
  2270                                  ;load the counter 2 value for d3
  2271 000063DC B8B41F                  mov ax, 1fb4h
  2272 000063DF E642                    out 42h, al
  2273 000063E1 88E0                    mov al, ah
  2274 000063E3 E642                    out 42h, al
  2275                                  
  2276                                  ;turn the speaker on
  2277 000063E5 E461                    in al, 61h
  2278 000063E7 88C4                    mov ah,al
  2279 000063E9 0C03                    or al, 3h
  2280 000063EB E661                    out 61h, al
  2281 000063ED E892F1                  call delayx
  2282 000063F0 88E0                    mov al, ah
  2283 000063F2 E661                    out 61h, al
  2284                                  
  2285                                  ;call delayx
  2286                                  
  2287                                  ;load the counter 2 value for a3
  2288 000063F4 B82F15                  mov ax, 152fh
  2289 000063F7 E642                    out 42h, al
  2290 000063F9 88E0                    mov al, ah
  2291 000063FB E642                    out 42h, al
  2292                                  
  2293                                  ;turn the speaker on
  2294 000063FD E461                    in al, 61h
  2295 000063FF 88C4                    mov ah,al
  2296 00006401 0C03                    or al, 3h
  2297 00006403 E661                    out 61h, al
  2298                                  ;call delayx
  2299 00006405 88E0                    mov al, ah
  2300 00006407 E661                    out 61h, al
  2301                                  
  2302                                  ;call delayx
  2303                                  	
  2304                                  ;load the counter 2 value for a4
  2305 00006409 B8970A                  mov ax, 0A97h
  2306 0000640C E642                    out 42h, al
  2307 0000640E 88E0                    mov al, ah
  2308 00006410 E642                    out 42h, al
  2309                                  	
  2310                                  ;turn the speaker on
  2311 00006412 E461                    in al, 61h
  2312 00006414 88C4                    mov ah,al
  2313 00006416 0C03                    or al, 3h
  2314 00006418 E661                    out 61h, al
  2315 0000641A E865F1                  call delayx
  2316 0000641D 88E0                    mov al, ah
  2317 0000641F E661                    out 61h, al
  2318                                  
  2319                                  ;call delayx
  2320                                   
  2321 00006421 EBB5                    		jmp printagain2 ; infinitely print
  2322 00006423 5B                      		pop bx
  2323 00006424 58                      		pop ax
  2324 00006425 89EC                    		mov sp, bp
  2325 00006427 5D                      		pop bp
  2326 00006428 C3                      		ret		
  2327                                  ; subroutine to register a new thread
  2328                                  ; takes the segment, offset, of the thread routine and a parameter
  2329                                  ; for the target thread subroutine
  2330 00006429 55                      initpcb: 	push bp
  2331 0000642A 89E5                    			mov bp, sp
  2332 0000642C 50                      			push ax
  2333 0000642D 53                      			push bx
  2334 0000642E 51                      			push cx
  2335 0000642F 56                      			push si
  2336                                  			
  2337 00006430 8B1E[0344]              			mov bx, [nextpcb] ; read next available pcb index
  2338 00006434 83FB20                  			cmp bx, 32 ; are all PCBs used
  2339 00006437 7448                    			je exit2 ; yes, exit
  2340                                  			
  2341 00006439 B105                    			mov cl, 5
  2342 0000643B D3E3                    			shl bx, cl ; multiply by 32 for pcb start ix2^5 
  2343                                  			
  2344 0000643D 8B4608                  			mov ax, [bp+8] ; read segment parameter
  2345 00006440 8987[1500]              			mov [pcb+bx+18], ax ; save in pcb space for cs
  2346 00006444 8B4606                  			mov ax, [bp+6] ; read offset parameter
  2347 00006447 8987[1300]              			mov [pcb+bx+16], ax ; save in pcb space for ip
  2348 0000644B 8C9F[1900]              			mov [pcb+bx+22], ds ; set stack to our segment
  2349                                  			
  2350 0000644F 8B36[0344]              			mov si, [nextpcb] ; read this pcb index
  2351 00006453 B109                    			mov cl, 9
  2352 00006455 D3E6                    			shl si, cl ; multiply by 512...ix2^9 (512)
  2353 00006457 81C6[0306]              			add si, 256*2+stack ; end of stack for this thread
  2354 0000645B 8B4604                  			mov ax, [bp+4] ; read parameter for subroutine
  2355 0000645E 83EE02                  			sub si, 2 ; decrement thread stack pointer
  2356 00006461 8904                    			mov [si], ax ; pushing param on thread stack
  2357 00006463 83EE02                  			sub si, 2 ; space for return address
  2358 00006466 89B7[1100]              			mov [pcb+bx+14], si ; save si in pcb space for sp
  2359                                  			
  2360 0000646A C787[1D00]0002          			mov word [pcb+bx+26], 0x0200 ; initialize thread flags
  2361 00006470 A1[1F00]                			mov ax, [pcb+28] ; read next of 0th thread in ax
  2362 00006473 8987[1F00]              			mov [pcb+bx+28], ax ; set as next of new thread
  2363                                  			
  2364 00006477 A1[0344]                			mov ax, [nextpcb] ; read new thread index
  2365 0000647A A3[1F00]                			mov [pcb+28], ax ; set as next of 0th thread
  2366                                  			
  2367 0000647D FF06[0344]              			inc word [nextpcb] ; this pcb is now used
  2368                                  			
  2369 00006481 5E                      			exit2: pop si
  2370 00006482 59                      			pop cx
  2371 00006483 5B                      			pop bx
  2372 00006484 58                      			pop ax
  2373 00006485 5D                      			pop bp
  2374 00006486 C20600                  			ret 6
  2375                                  ; timer interrupt service routine
  2376 00006489 50                      timer: 		push ax
  2377 0000648A 2EFF06[0550]                        inc word [cs:tickcount]; increment tick count
  2378 0000648F 2E813E[0550]DE03                    cmp word[cs:tickcount],990
  2379 00006496 750D                    			jnz y
  2380 00006498 2EFF06[0750]            			inc word[cs:counter]
  2381 0000649D 2EFF36[0750]            			push word [cs:counter]
  2382                                  
  2383 000064A2 E8D6FD                  			call printnum ; print tick count
  2384                                              
  2385                                  			y:
  2386 000064A5 58                      			pop ax
  2387                                              
  2388 000064A6 1E                      			push ds
  2389 000064A7 53                      			push bx
  2390 000064A8 0E                      			push cs
  2391 000064A9 1F                      			pop ds ; initialize ds to data segment
  2392                                  			
  2393 000064AA 8B1E[0544]              			mov bx, [current] ; read index of current in bx
  2394 000064AE D1E3                    			shl bx, 1
  2395 000064B0 D1E3                    			shl bx, 1
  2396 000064B2 D1E3                    			shl bx, 1
  2397 000064B4 D1E3                    			shl bx, 1
  2398 000064B6 D1E3                    			shl bx, 1 ; multiply by 32 for pcb start
  2399                                  			
  2400 000064B8 8987[0300]              			mov [pcb+bx+0], ax ; save ax in current pcb
  2401 000064BC 898F[0700]              			mov [pcb+bx+4], cx ; save cx in current pcb
  2402 000064C0 8997[0900]              			mov [pcb+bx+6], dx ; save dx in current pcb
  2403 000064C4 89B7[0B00]              			mov [pcb+bx+8], si ; save si in current pcb
  2404 000064C8 89BF[0D00]              			mov [pcb+bx+10], di ; save di in current pcb
  2405 000064CC 89AF[0F00]              			mov [pcb+bx+12], bp ; save bp in current pcb
  2406 000064D0 8C87[1B00]              			mov [pcb+bx+24], es ; save es in current pcb
  2407 000064D4 58                      			pop ax ; read original bx from stack
  2408 000064D5 8987[0500]              			mov [pcb+bx+2], ax ; save bx in current pcb
  2409 000064D9 58                      			pop ax ; read original ds from stack
  2410 000064DA 8987[1700]              			mov [pcb+bx+20], ax ; save ds in current pcb
  2411 000064DE 58                      			pop ax ; read original ip from stack
  2412 000064DF 8987[1300]              			mov [pcb+bx+16], ax ; save ip in current pcb
  2413 000064E3 58                      			pop ax ; read original cs from stack
  2414 000064E4 8987[1500]              			mov [pcb+bx+18], ax ; save cs in current pcb
  2415 000064E8 58                      			pop ax ; read original flags from stack
  2416 000064E9 8987[1D00]              			mov [pcb+bx+26], ax ; save cs in current pcb
  2417 000064ED 8C97[1900]              			mov [pcb+bx+22], ss ; save ss in current pcb
  2418 000064F1 89A7[1100]              			mov [pcb+bx+14], sp ; save sp in current pcb
  2419                                  			
  2420 000064F5 8B9F[1F00]              			mov bx, [pcb+bx+28] ; read next pcb of this pcb
  2421 000064F9 891E[0544]              			mov [current], bx ; update current to new pcb
  2422 000064FD B105                    			mov cl, 5
  2423 000064FF D3E3                    			shl bx, cl ; multiply by 32 for pcb start
  2424                                  			
  2425 00006501 8B8F[0700]              			mov cx, [pcb+bx+4] ; read cx of new process
  2426 00006505 8B97[0900]              			mov dx, [pcb+bx+6] ; read dx of new process
  2427 00006509 8BB7[0B00]              			mov si, [pcb+bx+8] ; read si of new process
  2428 0000650D 8BBF[0D00]              			mov di, [pcb+bx+10] ; read diof new process
  2429 00006511 8BAF[0F00]              			mov bp, [pcb+bx+12] ; read bp of new process
  2430 00006515 8E87[1B00]              			mov es, [pcb+bx+24] ; read es of new process
  2431 00006519 8E97[1900]              			mov ss, [pcb+bx+22] ; read ss of new process
  2432 0000651D 8BA7[1100]              			mov sp, [pcb+bx+14] ; read sp of new process
  2433 00006521 FFB7[1D00]              			push word [pcb+bx+26] ; push flags of new process
  2434 00006525 FFB7[1500]              			push word [pcb+bx+18] ; push cs of new process
  2435 00006529 FFB7[1300]              			push word [pcb+bx+16] ; push ip of new process
  2436 0000652D FFB7[1700]              			push word [pcb+bx+20] ; push ds of new process
  2437                                  			
  2438 00006531 B020                    			mov al, 0x20
  2439 00006533 E620                    			out 0x20, al ; send EOI to PIC
  2440                                  			
  2441 00006535 8B87[0300]              			mov ax, [pcb+bx+0] ; read ax of new process
  2442 00006539 8B9F[0500]              			mov bx, [pcb+bx+2] ; read bx of new process
  2443 0000653D 1F                      			pop ds ; read ds of new process
  2444                                  			
  2445 0000653E CF                      			iret ; return to new process
  2446                                  
  2447                                  
  2448                                  start: 
  2449 0000653F E846FA                         call main_screen
  2450 00006542 B84C04                  mov ax, 1100
  2451 00006545 E640                    out 0x40, al
  2452 00006547 88E0                    mov al, ah
  2453 00006549 E640                    out 0x40, al
  2454                                  
  2455 0000654B 31C0                    		xor ax, ax
  2456 0000654D 8EC0                    		mov es, ax ; point es to IVT base
  2457 0000654F 26A12400                		mov ax, [es:9*4]
  2458 00006553 A3[DF4F]                		mov [oldisr], ax ; save offset of old routine
  2459 00006556 26A12600                		mov ax, [es:9*4+2]
  2460 0000655A A3[E14F]                		mov [oldisr+2], ax ; save segment of old routine
  2461                                  
  2462 0000655D FA                      		cli ; disable interrupts
  2463 0000655E 26C7062400[6E5C]        		mov word [es:9*4], kbisr ; store offset at n*4
  2464 00006565 268C0E2600              		mov [es:9*4+2], cs ; store segment at n*4+2
  2465 0000656A 26C7062000[8964]        		mov word [es:8*4], timer; store offset at n*4  ;--
  2466 00006571 268C0E2200              		mov [es:8*4+2], cs ; store segment at n*4+2    ;--
  2467 00006576 FB                      		sti ; enable interrupts
  2468                                  
  2469 00006577 BA[3F65]                		mov dx, start ; end of resident portion
  2470 0000657A 83C20F                  		add dx, 15 ; round up to next para
  2471 0000657D B104                    		mov cl, 4
  2472 0000657F D3EA                    		shr dx, cl ; number of paras..../2^4
  2473 00006581 30E4                    		nextkey: xor ah, ah ; service 0 – get keystroke
  2474 00006583 CD16                    				 int 0x16 ; bios keyboard services
  2475                                  				
  2476 00006585 0E                      				push cs ; use current code segment
  2477 00006586 B8[A563]                				mov ax, mytask
  2478 00006589 50                      				push ax ; use mytask as offset
  2479 0000658A FF36[0744]              				push word [lineno] ; thread parameter
  2480 0000658E E898FE                  				call initpcb ; register the thread
  2481 00006591 FF06[0744]              				inc word [lineno] ; update line number
  2482 00006595 0E                      				push cs ; use current code segment
  2483 00006596 B8[C563]                				mov ax, mytask2
  2484 00006599 50                      				push ax ; use mytask as offset
  2485 0000659A FF36[0744]              				push word [lineno] ; thread parameter
  2486 0000659E E888FE                  				call initpcb ; register the thread
  2487 000065A1 FF06[0744]              				inc word [lineno] ; update line number
  2488 000065A5 EBDA                    				jmp nextkey ; wait for next keypress
